#version 320 es
precision highp float;
precision highp int;

uniform float CORE_FLIP_NDC ;

struct DefaultMaterialFogStruct
{
    uvec4 indices;
    vec4 firstLayer;
    vec4 secondLayer;
    vec4 baseFactors;
    vec4 inscatteringColor;
    vec4 envMapFactor;
    vec4 additionalFactor;
};

struct GlobalPostProcessStruct
{
    uvec4 flags;
    vec4 renderTimings;
    vec4 factors[14];
    vec4 userFactors[16];
};

struct DefaultMaterialSingleMaterialStruct
{
    vec4 factors[15];
    uvec4 indices;
};

struct DefaultMaterialMaterialStruct
{
    DefaultMaterialSingleMaterialStruct material[64];
};

#ifndef SPIRV_CROSS_CONSTANT_ID_1
#define SPIRV_CROSS_CONSTANT_ID_1 0u
#endif
const uint CORE_MATERIAL_FLAGS = SPIRV_CROSS_CONSTANT_ID_1;
const uint _1438 = (CORE_MATERIAL_FLAGS & 8u);
const bool _1439 = (_1438 == 8u);

struct DefaultMaterialTransformSingleMaterialStruct
{
    uvec4 _packed[15];
    uvec4 indices;
};

struct DefaultMaterialTransformMaterialStruct
{
    DefaultMaterialTransformSingleMaterialStruct material[64];
};

const uint _1490 = (CORE_MATERIAL_FLAGS & 8u);
const bool _1491 = (_1490 == 8u);

struct DefaultMaterialGeneralDataStruct
{
    uvec4 indices;
    vec4 viewportSizeInvViewportSize;
    vec4 sceneTimingData;
};

const uint _1653 = (CORE_MATERIAL_FLAGS & 128u);
const bool _1654 = (_1653 == 128u);
const uint _1666 = (CORE_MATERIAL_FLAGS & 256u);
const bool _1667 = (_1666 == 256u);

struct DefaultCameraMatrixStruct
{
    mat4 view;
    mat4 proj;
    mat4 viewProj;
    mat4 viewInv;
    mat4 projInv;
    mat4 viewProjInv;
    mat4 viewPrevFrame;
    mat4 projPrevFrame;
    mat4 viewProjPrevFrame;
    mat4 shadowViewProj;
    mat4 shadowViewProjInv;
    vec4 jitter;
    vec4 jitterPrevFrame;
    uvec4 indices;
    uvec4 multiViewIndices;
    vec4 frustumPlanes[6];
    uvec4 counts;
    uvec4 pad0;
    mat4 matPad0;
    mat4 matPad1;
};

const uint _2282 = (CORE_MATERIAL_FLAGS & 64u);
const bool _2283 = (_2282 == 64u);
const uint _2320 = (CORE_MATERIAL_FLAGS & 16u);
const bool _2321 = (_2320 == 16u);

struct DefaultMaterialSingleLightStruct
{
    vec4 pos;
    vec4 dir;
    vec4 color;
    vec4 spotLightParams;
    vec4 shadowFactors;
    vec4 additionalFactor;
    uvec4 flags;
    uvec4 indices;
};

struct DefaultMaterialLightStruct
{
    uint directionalLightBeginIndex;
    uint directionalLightCount;
    uint pointLightBeginIndex;
    uint pointLightCount;
    uint spotLightBeginIndex;
    uint spotLightCount;
    uint pad0;
    uint pad1;
    uvec4 clusterSizes;
    vec4 clusterFactors;
    vec4 atlasSizeInvSize;
    vec4 additionalFactors;
    DefaultMaterialSingleLightStruct lights[64];
};

const uint _2514 = (CORE_MATERIAL_FLAGS & 1u);
const bool _2515 = (_2514 == 1u);
#ifndef SPIRV_CROSS_CONSTANT_ID_2
#define SPIRV_CROSS_CONSTANT_ID_2 0u
#endif
const uint CORE_LIGHTING_FLAGS = SPIRV_CROSS_CONSTANT_ID_2;
const uint _2545 = (CORE_LIGHTING_FLAGS & 1u);
const bool _2546 = (_2545 == 1u);
const uint _2597 = (CORE_LIGHTING_FLAGS & 4u);
const bool _2598 = (_2597 == 4u);
const uint _2653 = (CORE_MATERIAL_FLAGS & 1u);
const bool _2654 = (_2653 == 1u);
const uint _2682 = (CORE_LIGHTING_FLAGS & 1u);
const bool _2683 = (_2682 == 1u);
const uint _2777 = (CORE_LIGHTING_FLAGS & 2u);
const bool _2778 = (_2777 == 2u);

struct DefaultMaterialEnvironmentStruct
{
    vec4 indirectSpecularColorFactor;
    vec4 indirectDiffuseColorFactor;
    vec4 envMapColorFactor;
    vec4 values;
    vec4 blendFactor;
    mat4 envRotation;
    uvec4 indices;
    vec4 shIndirectCoefficients[9];
    vec4 pad0;
};

const uint _3027 = (CORE_MATERIAL_FLAGS & 4u);
const bool _3028 = (_3027 == 4u);
const uint _3100 = (CORE_MATERIAL_FLAGS & 32u);
const bool _3101 = (_3100 == 32u);

struct DefaultMaterialSingleMeshStruct
{
    mat4 world;
    mat4 normalWorld;
    mat4 prevWorld;
    uvec4 indices;
    uvec4 layers;
    uvec4 customData[2];
};

struct DefaultMaterialMeshStruct
{
    DefaultMaterialSingleMeshStruct mesh[64];
};

const uint _3151 = (CORE_MATERIAL_FLAGS & 1024u);
const bool _3152 = (_3151 == 1024u);
const uint _3204 = (CORE_MATERIAL_FLAGS & 2048u);
const bool _3205 = (_3204 == 2048u);
const uint _3236 = (CORE_MATERIAL_FLAGS & 32u);
const bool _3237 = (_3236 == 32u);
#ifndef SPIRV_CROSS_CONSTANT_ID_4
#define SPIRV_CROSS_CONSTANT_ID_4 0u
#endif
const uint CORE_CAMERA_FLAGS = SPIRV_CROSS_CONSTANT_ID_4;
#ifndef SPIRV_CROSS_CONSTANT_ID_3
#define SPIRV_CROSS_CONSTANT_ID_3 0u
#endif
const uint CORE_POST_PROCESS_FLAGS = SPIRV_CROSS_CONSTANT_ID_3;
const bool _3317 = (CORE_POST_PROCESS_FLAGS > 0u);

layout(std140) uniform s0_b3
{
    DefaultMaterialFogStruct uFogData;
} _s0_b3;

layout(std140) uniform s0_b5
{
    GlobalPostProcessStruct uPostProcessData;
} _s0_b5;

layout(std140) uniform s1_b2
{
    DefaultMaterialMaterialStruct uMaterialData;
} _s1_b2;

layout(std140) uniform s1_b3
{
    DefaultMaterialTransformMaterialStruct uMaterialTransformData;
} _s1_b3;

layout(std140) uniform s0_b1
{
    DefaultMaterialGeneralDataStruct uGeneralData;
} _s0_b1;

layout(std140) uniform s0_b0
{
    DefaultCameraMatrixStruct uCameras[16];
} _s0_b0;

layout(std140) uniform s0_b4
{
    DefaultMaterialLightStruct uLightData;
} _s0_b4;

layout(std140) uniform s0_b2
{
    DefaultMaterialEnvironmentStruct uEnvironmentData;
} _s0_b2;

layout(std140) uniform s1_b0
{
    DefaultMaterialMeshStruct uMeshMatrix;
} _s1_b0;

uniform mediump sampler2D s2_b0;
uniform mediump sampler2D s2_b1[10];
uniform highp sampler2D s0_b8;
uniform highp sampler2DShadow s0_b9;
uniform highp samplerCube s0_b10;
uniform mediump sampler2D s0_b7;

layout(location = 5) in mediump vec4 inColor;
layout(location = 4) in vec4 inUv;
layout(location = 1) in vec3 inNormal;
layout(location = 2) in vec4 inTangentW;
layout(location = 6) flat in uint inIndices;
layout(location = 0) in vec3 inPos;
layout(location = 1) out vec4 outVelocityNormal;
layout(location = 3) in vec4 inPrevPosI;
layout(location = 0) out vec4 outColor;

float _8195;
vec3 _8304;

void main()
{
    vec2 _3359 = gl_FragCoord.xy * _s0_b1.uGeneralData.viewportSizeInvViewportSize.zw;
    bool _3360 = CORE_FLIP_NDC < 0.0;
    vec2 _8100;
    if (_3360)
    {
        _8100 = vec2(_3359.x, 1.0 - _3359.y);
    }
    else
    {
        _8100 = _3359;
    }
    uint _3728 = floatBitsToUint(_s1_b2.uMaterialData.material[0u].factors[11].y);
    uint _3691 = _3728 >> uint(16);
    vec2 _8101;
    if ((_3691 & 1u) == 1u)
    {
        _8101 = inUv.zw;
    }
    else
    {
        _8101 = inUv.xy;
    }
    uint _3705 = _3728 & 65535u;
    vec2 _8110;
    if (_1491 && ((_3705 & 1u) == 1u))
    {
        _8110 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[0u].x).xy, _8101), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[0u].y).xy, _8101)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[0u].z).xy;
    }
    else
    {
        _8110 = _8101;
    }
    mediump vec4 _3678 = texture(s2_b0, _8110);
    vec4 _3645 = (_3678 * _s1_b2.uMaterialData.material[0u].factors[0]) * inColor;
    mediump float _3648 = clamp(_3645.w, 0.0, 1.0);
    if (_1654)
    {
        if (_3648 < _s1_b2.uMaterialData.material[0u].factors[11].x)
        {
            discard;
        }
    }
    mediump vec4 _8113;
    if (_1667)
    {
        mediump vec4 _7969 = _3645;
        _7969.w = 1.0;
        _8113 = _7969;
    }
    else
    {
        vec4 _8112;
        do
        {
            if (_3648 == 0.0)
            {
                _8112 = vec4(0.0);
                break;
            }
            _8112 = vec4(_3645.xyz / vec3(_3648), _3648);
            break;
        } while(false);
        _8113 = _8112;
    }
    vec3 _3447 = normalize(inNormal);
    vec3 _8137;
    if (_3028)
    {
        vec2 _8114;
        if ((_3691 & 2u) == 2u)
        {
            _8114 = inUv.zw;
        }
        else
        {
            _8114 = inUv.xy;
        }
        vec2 _8136;
        if (_1491 && ((_3705 & 2u) == 2u))
        {
            _8136 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[1u].x).xy, _8114), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[1u].y).xy, _8114)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[1u].z).xy;
        }
        else
        {
            _8136 = _8114;
        }
        vec3 _3935 = normalize(inTangentW.xyz);
        _8137 = normalize(mat3(_3935, cross(_3447, _3935) * inTangentW.w, _3447) * normalize(((texture(s2_b1[0], _8136).xyz * 2.0) - vec3(1.0)) * vec3(_s1_b2.uMaterialData.material[0u].factors[1].x, _s1_b2.uMaterialData.material[0u].factors[1].x, 1.0)));
    }
    else
    {
        _8137 = _3447;
    }
    vec3 _8138;
    if (gl_FrontFacing)
    {
        _8138 = _8137;
    }
    else
    {
        _8138 = -_8137;
    }
    vec2 _8139;
    if ((_3691 & 4u) == 4u)
    {
        _8139 = inUv.zw;
    }
    else
    {
        _8139 = inUv.xy;
    }
    vec2 _8173;
    if (_1491 && ((_3705 & 4u) == 4u))
    {
        _8173 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[2u].x).xy, _8139), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[2u].y).xy, _8139)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[2u].z).xy;
    }
    else
    {
        _8173 = _8139;
    }
    mediump vec4 _3986 = texture(s2_b1[1], _8173);
    vec4 _3476 = _3986 * _s1_b2.uMaterialData.material[0u].factors[2];
    mediump float _4099 = clamp(_3476.z, 0.0, 1.0);
    mediump vec3 _4107 = mix(vec3(_3476.w), _8113.xyz, vec3(_4099));
    vec3 _4116 = _4107.xyz;
    vec3 _4122 = mix(_8113.xyz * (vec3(1.0) - _4116), vec3(0.0), vec3(_4099));
    mediump vec3 _4157 = dFdx(_3447);
    mediump vec3 _4159 = dFdy(_3447);
    mediump float _4173 = clamp(max(_3476.y, pow(clamp(max(dot(_4157, _4157), dot(_4159, _4159)), 0.0, 1.0), 0.333000004291534423828125)), 0.08900000154972076416015625, 1.0);
    mediump float _4145 = _4173 * _4173;
    mediump float _4148 = _4145 * _4145;
    uint _4177 = inIndices & 65535u;
    vec3 _3490 = normalize(_s0_b0.uCameras[_4177].viewInv[3].xyz - inPos);
    float _3494 = clamp(dot(_8138, _3490), 9.9999997473787516355514526367188e-05, 1.0);
    vec3 _8247;
    mediump float _8472;
    if (_3101)
    {
        uint _4236 = floatBitsToUint(_s1_b2.uMaterialData.material[0].factors[11].y);
        vec2 _8201;
        if (((_4236 >> uint(16)) & 512u) == 512u)
        {
            _8201 = inUv.zw;
        }
        else
        {
            _8201 = inUv.xy;
        }
        vec2 _8241;
        if (_1439 && (((_4236 & 65535u) & 512u) == 512u))
        {
            _8241 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[9u].x).xy, _8201), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[9u].y).xy, _8201)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[9u].z).xy;
        }
        else
        {
            _8241 = _8201;
        }
        mediump vec4 _4189 = texture(s2_b1[8], _8241);
        mediump float _4190 = _4189.x;
        _8472 = _4190 * _s1_b2.uMaterialData.material[0u].factors[9].x;
        _8247 = _4122 * fma(-_4190, _s1_b2.uMaterialData.material[0u].factors[9].x, 1.0);
    }
    else
    {
        _8472 = _8195;
        _8247 = _4122;
    }
    vec3 _8498;
    if (_3152)
    {
        vec3 _4384 = _8247 * 0.3183098733425140380859375;
        vec3 _8375;
        _8375 = vec3(0.0);
        vec3 _8624;
        for (uint _8370 = 0u; _8370 < _s0_b4.uLightData.directionalLightCount; _8375 = _8624, _8370++)
        {
            uint _4399 = _s0_b4.uLightData.directionalLightBeginIndex + _8370;
            if (!any(notEqual((_s1_b0.uMeshMatrix.mesh[0u].layers.xy & _s0_b4.uLightData.lights[_4399].indices.wz), uvec2(0u))))
            {
                _8624 = _8375;
                continue;
            }
            vec3 _4411 = -_s0_b4.uLightData.lights[_4399].dir.xyz;
            float _4416 = clamp(dot(_8138, _4411), 0.0, 1.0);
            mediump float _8596;
            if (_2515)
            {
                mediump float _8597;
                if ((_s0_b4.uLightData.lights[_4399].flags.x & 8u) == 8u)
                {
                    vec4 _4435 = _s0_b0.uCameras[_s0_b4.uLightData.lights[_4399].flags.y].shadowViewProj * vec4(inPos, 1.0);
                    mediump float _8598;
                    if (_2546)
                    {
                        vec3 _4720 = _4435.xyz / vec3(_4435.w);
                        float _4724 = float(_s0_b4.uLightData.lights[_4399].flags.z);
                        float _4784 = _4720.z;
                        bool _4785 = _4784 > 0.0;
                        bool _4791;
                        if (_4785)
                        {
                            _4791 = _4720.x > (_s0_b4.uLightData.lights[_4399].shadowFactors.w * _4724);
                        }
                        else
                        {
                            _4791 = _4785;
                        }
                        bool _4797;
                        if (_4791)
                        {
                            _4797 = _4720.x < fma(_s0_b4.uLightData.lights[_4399].shadowFactors.w, _4724, _s0_b4.uLightData.lights[_4399].shadowFactors.w);
                        }
                        else
                        {
                            _4797 = _4791;
                        }
                        mediump float _8586;
                        if (_4797)
                        {
                            vec4 _4732 = texture(s0_b8, _4720.xy);
                            float _4737 = _4732.x;
                            mediump float _8589;
                            if (_4784 > _4737)
                            {
                                float _4749 = max(fma(-_4737, _4737, _4732.y), 9.9999997473787516355514526367188e-06);
                                float _4754 = _4784 - _4737;
                                _8589 = fma(clamp(((_4749 / fma(_4754, _4754, _4749)) - 0.20000000298023223876953125) * 1.25, 0.0, 1.0) - 1.0, _s0_b4.uLightData.lights[_4399].shadowFactors.x, 1.0);
                            }
                            else
                            {
                                _8589 = 1.0;
                            }
                            _8586 = _8589;
                        }
                        else
                        {
                            _8586 = 1.0;
                        }
                        _8598 = _8586;
                    }
                    else
                    {
                        vec3 _4850 = _4435.xyz / vec3(_4435.w);
                        float _4854 = float(_s0_b4.uLightData.lights[_4399].flags.z);
                        float _5075 = _4850.z;
                        bool _5076 = _5075 > 0.0;
                        bool _5082;
                        if (_5076)
                        {
                            _5082 = _4850.x > (_s0_b4.uLightData.lights[_4399].shadowFactors.w * _4854);
                        }
                        else
                        {
                            _5082 = _5076;
                        }
                        bool _5088;
                        if (_5082)
                        {
                            _5088 = _4850.x < fma(_s0_b4.uLightData.lights[_4399].shadowFactors.w, _4854, _s0_b4.uLightData.lights[_4399].shadowFactors.w);
                        }
                        else
                        {
                            _5088 = _5082;
                        }
                        mediump float _8583;
                        if (_5088)
                        {
                            vec2 _4877 = fma(_4850.xy, _s0_b4.uLightData.atlasSizeInvSize.xy, vec2(0.5));
                            vec2 _4880 = floor(_4877) - vec2(0.5);
                            float _4885 = fract(_4877.x);
                            float _4888 = fract(_4877.y);
                            float _4897 = _5075 - max(_s0_b4.uLightData.lights[_4399].shadowFactors.z * (1.0 - _4416), _s0_b4.uLightData.lights[_4399].shadowFactors.y);
                            float _4900 = fma(-3.0, _4885, 4.0);
                            float _4903 = fma(3.0, _4885, 1.0);
                            float _4909 = (fma(-2.0, _4885, 3.0) / _4900) - 2.0;
                            float _4912 = (3.0 + _4885) * 0.14285714924335479736328125;
                            float _4916 = (_4885 / _4903) + 2.0;
                            float _4919 = fma(-3.0, _4888, 4.0);
                            float _4922 = fma(3.0, _4888, 1.0);
                            float _4928 = (fma(-2.0, _4888, 3.0) / _4919) - 2.0;
                            float _4931 = (3.0 + _4888) * 0.14285714924335479736328125;
                            float _4935 = (_4888 / _4922) + 2.0;
                            _8583 = fma(fma(_4903 * _4922, texture(s0_b9, vec3(vec3(_s0_b4.uLightData.atlasSizeInvSize.zw * (_4880 + vec2(_4916, _4935)), _4897).xy, _4897)), fma(7.0 * _4922, texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4912, _4935) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)), fma(_4900 * _4922, texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4909, _4935) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)), fma(_4903 * 7.0, texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4916, _4931) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)), fma(49.0, texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4912, _4931) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)), fma(_4900 * 7.0, texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4909, _4931) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)), fma(_4903 * _4919, texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4916, _4928) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)), fma(_4900 * _4919, texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4909, _4928) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)), (7.0 * _4919) * texture(s0_b9, vec3(vec3(fma(_4880, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_4912, _4928) * _s0_b4.uLightData.atlasSizeInvSize.zw), _4897).xy, _4897)))))))))) * (-0.0069444444961845874786376953125), _s0_b4.uLightData.lights[_4399].shadowFactors.x, 1.0);
                        }
                        else
                        {
                            _8583 = 1.0;
                        }
                        _8598 = _8583;
                    }
                    _8597 = _8598;
                }
                else
                {
                    _8597 = 1.0;
                }
                _8596 = _8597;
            }
            else
            {
                _8596 = 1.0;
            }
            vec3 _5258 = normalize(_4411 + _3490);
            float _5268 = clamp(dot(_8138, _5258), 0.0, 1.0);
            float _8590;
            vec3 _8591;
            if (_2283)
            {
                _8591 = (_8304 * ((((2.0 + (1.0 / _8195)) * pow(fma(-_5268, _5268, 1.0), 0.5 / _8195)) * 0.15915493667125701904296875) * (0.25 / fma(-_4416, _4416, _4416 + _3494)))) * _4416;
                _8590 = fma(-_8195, _8195, 1.0);
            }
            else
            {
                _8591 = vec3(0.0);
                _8590 = 1.0;
            }
            float _8592;
            vec3 _8593;
            if (_2321)
            {
                float _5308 = clamp(dot(_8304, _5258), 9.9999997473787516355514526367188e-05, 1.0);
                float _5312 = clamp(dot(_4411, _5258), 9.9999997473787516355514526367188e-05, 1.0);
                float _5429 = fma(fma(_5308, _8195, -_5308), _5308, 1.0);
                float _5448 = pow(1.0 - clamp(dot(_8304, _3490), 9.9999997473787516355514526367188e-05, 1.0), 5.0);
                float _5454 = fma(0.039999999105930328369140625, 1.0 - _5448, _5448);
                _8593 = _8591 + vec3((((_5454 * _8195) * (_8195 / (3.1415927410125732421875 * (_5429 * _5429)))) * min(0.25 / (_5312 * _5312), 64512.0)) * clamp(dot(_8304, _4411), 9.9999997473787516355514526367188e-05, 1.0));
                _8592 = _8590 * fma(-_5454, _8195, 1.0);
            }
            else
            {
                _8593 = _8591;
                _8592 = _8590;
            }
            float _5465 = fma(fma(_5268, _4148, -_5268), _5268, 1.0);
            float _5510 = pow(1.0 - clamp(dot(_3490, _5258), 0.0, 1.0), 5.0);
            vec3 _5521 = vec3(_5510) + (_4116 * (1.0 - _5510));
            _8624 = _8375 + (((_8593 + ((fma(vec3(1.0) - _5521, _4384, (_5521 * ((_4148 / (3.1415927410125732421875 * (_5465 * _5465))) * min(1.0 / ((_3494 + sqrt(fma(fma(-_3494, _4148, _3494), _3494, _4148))) * (_4416 + sqrt(fma(fma(-_4416, _4148, _4416), _4416, _4148)))), 64512.0))) * _8592) * _8592) * _4416)) * _s0_b4.uLightData.lights[_4399].color.xyz) * _8596);
        }
        vec3 _8374;
        if (_2598)
        {
            vec3 _8376;
            _8376 = _8375;
            vec3 _8625;
            for (uint _8371 = 0u; _8371 < _s0_b4.uLightData.spotLightCount; _8376 = _8625, _8371++)
            {
                uint _4487 = _s0_b4.uLightData.spotLightBeginIndex + _8371;
                if (!any(notEqual((_s1_b0.uMeshMatrix.mesh[0u].layers.xy & _s0_b4.uLightData.lights[_4487].indices.wz), uvec2(0u))))
                {
                    _8625 = _8376;
                    continue;
                }
                vec3 _4501 = _s0_b4.uLightData.lights[_4487].pos.xyz - inPos;
                float _4503 = length(_4501);
                vec3 _4507 = _4501 / vec3(_4503);
                float _4512 = clamp(dot(_8138, _4507), 0.0, 1.0);
                mediump float _8555;
                if (_2654)
                {
                    mediump float _8556;
                    if ((_s0_b4.uLightData.lights[_4487].flags.x & 8u) == 8u)
                    {
                        vec4 _4531 = _s0_b0.uCameras[_s0_b4.uLightData.lights[_4487].flags.y].shadowViewProj * vec4(inPos, 1.0);
                        mediump float _8557;
                        if (_2683)
                        {
                            vec3 _5555 = _4531.xyz / vec3(_4531.w);
                            float _5559 = float(_s0_b4.uLightData.lights[_4487].flags.z);
                            float _5619 = _5555.z;
                            bool _5620 = _5619 > 0.0;
                            bool _5626;
                            if (_5620)
                            {
                                _5626 = _5555.x > (_s0_b4.uLightData.lights[_4487].shadowFactors.w * _5559);
                            }
                            else
                            {
                                _5626 = _5620;
                            }
                            bool _5632;
                            if (_5626)
                            {
                                _5632 = _5555.x < fma(_s0_b4.uLightData.lights[_4487].shadowFactors.w, _5559, _s0_b4.uLightData.lights[_4487].shadowFactors.w);
                            }
                            else
                            {
                                _5632 = _5626;
                            }
                            mediump float _8545;
                            if (_5632)
                            {
                                vec4 _5567 = texture(s0_b8, _5555.xy);
                                float _5572 = _5567.x;
                                mediump float _8548;
                                if (_5619 > _5572)
                                {
                                    float _5584 = max(fma(-_5572, _5572, _5567.y), 9.9999997473787516355514526367188e-06);
                                    float _5589 = _5619 - _5572;
                                    _8548 = fma(clamp(((_5584 / fma(_5589, _5589, _5584)) - 0.20000000298023223876953125) * 1.25, 0.0, 1.0) - 1.0, _s0_b4.uLightData.lights[_4487].shadowFactors.x, 1.0);
                                }
                                else
                                {
                                    _8548 = 1.0;
                                }
                                _8545 = _8548;
                            }
                            else
                            {
                                _8545 = 1.0;
                            }
                            _8557 = _8545;
                        }
                        else
                        {
                            vec3 _5685 = _4531.xyz / vec3(_4531.w);
                            float _5689 = float(_s0_b4.uLightData.lights[_4487].flags.z);
                            float _5910 = _5685.z;
                            bool _5911 = _5910 > 0.0;
                            bool _5917;
                            if (_5911)
                            {
                                _5917 = _5685.x > (_s0_b4.uLightData.lights[_4487].shadowFactors.w * _5689);
                            }
                            else
                            {
                                _5917 = _5911;
                            }
                            bool _5923;
                            if (_5917)
                            {
                                _5923 = _5685.x < fma(_s0_b4.uLightData.lights[_4487].shadowFactors.w, _5689, _s0_b4.uLightData.lights[_4487].shadowFactors.w);
                            }
                            else
                            {
                                _5923 = _5917;
                            }
                            mediump float _8542;
                            if (_5923)
                            {
                                vec2 _5712 = fma(_5685.xy, _s0_b4.uLightData.atlasSizeInvSize.xy, vec2(0.5));
                                vec2 _5715 = floor(_5712) - vec2(0.5);
                                float _5720 = fract(_5712.x);
                                float _5723 = fract(_5712.y);
                                float _5732 = _5910 - max(_s0_b4.uLightData.lights[_4487].shadowFactors.z * (1.0 - _4512), _s0_b4.uLightData.lights[_4487].shadowFactors.y);
                                float _5735 = fma(-3.0, _5720, 4.0);
                                float _5738 = fma(3.0, _5720, 1.0);
                                float _5744 = (fma(-2.0, _5720, 3.0) / _5735) - 2.0;
                                float _5747 = (3.0 + _5720) * 0.14285714924335479736328125;
                                float _5751 = (_5720 / _5738) + 2.0;
                                float _5754 = fma(-3.0, _5723, 4.0);
                                float _5757 = fma(3.0, _5723, 1.0);
                                float _5763 = (fma(-2.0, _5723, 3.0) / _5754) - 2.0;
                                float _5766 = (3.0 + _5723) * 0.14285714924335479736328125;
                                float _5770 = (_5723 / _5757) + 2.0;
                                _8542 = fma(fma(_5738 * _5757, texture(s0_b9, vec3(vec3(_s0_b4.uLightData.atlasSizeInvSize.zw * (_5715 + vec2(_5751, _5770)), _5732).xy, _5732)), fma(7.0 * _5757, texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5747, _5770) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)), fma(_5735 * _5757, texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5744, _5770) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)), fma(_5738 * 7.0, texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5751, _5766) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)), fma(49.0, texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5747, _5766) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)), fma(_5735 * 7.0, texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5744, _5766) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)), fma(_5738 * _5754, texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5751, _5763) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)), fma(_5735 * _5754, texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5744, _5763) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)), (7.0 * _5754) * texture(s0_b9, vec3(vec3(fma(_5715, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5747, _5763) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5732).xy, _5732)))))))))) * (-0.0069444444961845874786376953125), _s0_b4.uLightData.lights[_4487].shadowFactors.x, 1.0);
                            }
                            else
                            {
                                _8542 = 1.0;
                            }
                            _8557 = _8542;
                        }
                        _8556 = _8557;
                    }
                    else
                    {
                        _8556 = 1.0;
                    }
                    _8555 = _8556;
                }
                else
                {
                    _8555 = 1.0;
                }
                float _4572 = clamp(fma(dot(_s0_b4.uLightData.lights[_4487].dir.xyz, -_4507), _s0_b4.uLightData.lights[_4487].spotLightParams.x, _s0_b4.uLightData.lights[_4487].spotLightParams.y), 0.0, 1.0);
                vec3 _6093 = normalize(_4507 + _3490);
                float _6103 = clamp(dot(_8138, _6093), 0.0, 1.0);
                float _8549;
                vec3 _8550;
                if (_2283)
                {
                    _8550 = (_8304 * ((((2.0 + (1.0 / _8195)) * pow(fma(-_6103, _6103, 1.0), 0.5 / _8195)) * 0.15915493667125701904296875) * (0.25 / fma(-_4512, _4512, _4512 + _3494)))) * _4512;
                    _8549 = fma(-_8195, _8195, 1.0);
                }
                else
                {
                    _8550 = vec3(0.0);
                    _8549 = 1.0;
                }
                float _8551;
                vec3 _8552;
                if (_2321)
                {
                    float _6143 = clamp(dot(_8304, _6093), 9.9999997473787516355514526367188e-05, 1.0);
                    float _6147 = clamp(dot(_4507, _6093), 9.9999997473787516355514526367188e-05, 1.0);
                    float _6264 = fma(fma(_6143, _8195, -_6143), _6143, 1.0);
                    float _6283 = pow(1.0 - clamp(dot(_8304, _3490), 9.9999997473787516355514526367188e-05, 1.0), 5.0);
                    float _6289 = fma(0.039999999105930328369140625, 1.0 - _6283, _6283);
                    _8552 = _8550 + vec3((((_6289 * _8195) * (_8195 / (3.1415927410125732421875 * (_6264 * _6264)))) * min(0.25 / (_6147 * _6147), 64512.0)) * clamp(dot(_8304, _4507), 9.9999997473787516355514526367188e-05, 1.0));
                    _8551 = _8549 * fma(-_6289, _8195, 1.0);
                }
                else
                {
                    _8552 = _8550;
                    _8551 = _8549;
                }
                float _6300 = fma(fma(_6103, _4148, -_6103), _6103, 1.0);
                float _6345 = pow(1.0 - clamp(dot(_3490, _6093), 0.0, 1.0), 5.0);
                vec3 _6356 = vec3(_6345) + (_4116 * (1.0 - _6345));
                _8625 = _8376 + ((((_8552 + ((fma(vec3(1.0) - _6356, _4384, (_6356 * ((_4148 / (3.1415927410125732421875 * (_6300 * _6300))) * min(1.0 / ((_3494 + sqrt(fma(fma(-_3494, _4148, _3494), _3494, _4148))) * (_4512 + sqrt(fma(fma(-_4512, _4148, _4512), _4512, _4148)))), 64512.0))) * _8551) * _8551) * _4512)) * _s0_b4.uLightData.lights[_4487].color.xyz) * ((_4572 * _4572) * (max(min(1.0 - pow(_4503 / _s0_b4.uLightData.lights[_4487].dir.w, 4.0), 1.0), 0.0) / (_4503 * _4503)))) * _8555);
            }
            _8374 = _8376;
        }
        else
        {
            _8374 = _8375;
        }
        vec3 _8373;
        if (_2778)
        {
            vec3 _8377;
            _8377 = _8374;
            vec3 _8626;
            for (uint _8372 = 0u; _8372 < _s0_b4.uLightData.pointLightCount; _8377 = _8626, _8372++)
            {
                uint _4623 = _s0_b4.uLightData.pointLightBeginIndex + _8372;
                if (!any(notEqual((_s1_b0.uMeshMatrix.mesh[0u].layers.xy & _s0_b4.uLightData.lights[_4623].indices.wz), uvec2(0u))))
                {
                    _8626 = _8377;
                    continue;
                }
                vec3 _4637 = _s0_b4.uLightData.lights[_4623].pos.xyz - inPos;
                float _4639 = length(_4637);
                vec3 _4643 = _4637 / vec3(_4639);
                float _4648 = clamp(dot(_8138, _4643), 0.0, 1.0);
                vec3 _6412 = normalize(_4643 + _3490);
                float _6422 = clamp(dot(_8138, _6412), 0.0, 1.0);
                float _8533;
                vec3 _8534;
                if (_2283)
                {
                    _8534 = (_8304 * ((((2.0 + (1.0 / _8195)) * pow(fma(-_6422, _6422, 1.0), 0.5 / _8195)) * 0.15915493667125701904296875) * (0.25 / fma(-_4648, _4648, _4648 + _3494)))) * _4648;
                    _8533 = fma(-_8195, _8195, 1.0);
                }
                else
                {
                    _8534 = vec3(0.0);
                    _8533 = 1.0;
                }
                float _8535;
                vec3 _8536;
                if (_2321)
                {
                    float _6462 = clamp(dot(_8304, _6412), 9.9999997473787516355514526367188e-05, 1.0);
                    float _6466 = clamp(dot(_4643, _6412), 9.9999997473787516355514526367188e-05, 1.0);
                    float _6583 = fma(fma(_6462, _8195, -_6462), _6462, 1.0);
                    float _6602 = pow(1.0 - clamp(dot(_8304, _3490), 9.9999997473787516355514526367188e-05, 1.0), 5.0);
                    float _6608 = fma(0.039999999105930328369140625, 1.0 - _6602, _6602);
                    _8536 = _8534 + vec3((((_6608 * _8195) * (_8195 / (3.1415927410125732421875 * (_6583 * _6583)))) * min(0.25 / (_6466 * _6466), 64512.0)) * clamp(dot(_8304, _4643), 9.9999997473787516355514526367188e-05, 1.0));
                    _8535 = _8533 * fma(-_6608, _8195, 1.0);
                }
                else
                {
                    _8536 = _8534;
                    _8535 = _8533;
                }
                float _6619 = fma(fma(_6422, _4148, -_6422), _6422, 1.0);
                float _6664 = pow(1.0 - clamp(dot(_3490, _6412), 0.0, 1.0), 5.0);
                vec3 _6675 = vec3(_6664) + (_4116 * (1.0 - _6664));
                _8626 = _8377 + (((_8536 + ((fma(vec3(1.0) - _6675, _4384, (_6675 * ((_4148 / (3.1415927410125732421875 * (_6619 * _6619))) * min(1.0 / ((_3494 + sqrt(fma(fma(-_3494, _4148, _3494), _3494, _4148))) * (_4648 + sqrt(fma(fma(-_4648, _4148, _4648), _4648, _4148)))), 64512.0))) * _8535) * _8535) * _4648)) * _s0_b4.uLightData.lights[_4623].color.xyz) * (max(min(1.0 - pow(_4639 / _s0_b4.uLightData.lights[_4623].dir.w, 4.0), 1.0), 0.0) / (_4639 * _4639)));
            }
            _8373 = _8377;
        }
        else
        {
            _8373 = _8374;
        }
        _8498 = _8373;
    }
    else
    {
        _8498 = vec3(0.0);
    }
    vec2 _6705 = (gl_FragCoord.xy * _s1_b2.uMaterialData.material[0].factors[6].y) * (vec2(1.0) / vec2(max(1.0, _s1_b2.uMaterialData.material[0].factors[6].z), max(1.0, _s1_b2.uMaterialData.material[0].factors[6].w)));
    vec2 _8383;
    if (_3360)
    {
        _8383 = vec2(_6705.x, 1.0 - _6705.y);
    }
    else
    {
        _8383 = _6705;
    }
    mediump vec3 _6722 = textureLod(s2_b1[5], _8383, _s1_b2.uMaterialData.material[0].factors[6].x * _4173).xyz;
    mediump vec3 _8491;
    mediump vec3 _8493;
    if (_3205)
    {
        vec2 _8384;
        if ((_3691 & 16u) == 16u)
        {
            _8384 = inUv.zw;
        }
        else
        {
            _8384 = inUv.xy;
        }
        vec2 _8454;
        if (_1491 && ((_3705 & 16u) == 16u))
        {
            _8454 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[4u].x).xy, _8384), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[4u].y).xy, _8384)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0u]._packed[4u].z).xy;
        }
        else
        {
            _8454 = _8384;
        }
        mediump vec4 _6736 = texture(s2_b1[3], _8454);
        mat3 _6855 = mat3(_s0_b2.uEnvironmentData.envRotation[0].xyz, _s0_b2.uEnvironmentData.envRotation[1].xyz, _s0_b2.uEnvironmentData.envRotation[2].xyz);
        vec3 _6856 = _6855 * _8138;
        float _6892 = _6856.y;
        float _6899 = _6856.z;
        float _6906 = _6856.x;
        vec3 _3579 = ((max(vec3(0.0), (((((((_s0_b2.uEnvironmentData.shIndirectCoefficients[0].xyz + (_s0_b2.uEnvironmentData.shIndirectCoefficients[1].xyz * _6892)) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[2].xyz * _6899)) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[3].xyz * _6906)) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[4].xyz * (_6906 * _6892))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[5].xyz * (_6899 * _6892))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[6].xyz * fma(3.0 * _6899, _6899, -1.0))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[7].xyz * (_6906 * _6899))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[8].xyz * fma(_6906, _6906, -(_6892 * _6892)))) * _s0_b2.uEnvironmentData.indirectDiffuseColorFactor.xyz) * _8247) * clamp(_6736.x * _s1_b2.uMaterialData.material[0u].factors[4].x, 0.0, 1.0);
        vec4 _6976 = (vec4(-1.0, -0.0274999998509883880615234375, -0.572000026702880859375, 0.02199999988079071044921875) * _4173) + vec4(1.0, 0.0425000004470348358154296875, 1.03999996185302734375, -0.039999999105930328369140625);
        float _6978 = _6976.x;
        vec2 _6996 = (vec2(-1.03999996185302734375, 1.03999996185302734375) * fma(min(_6978 * _6978, exp2((-9.27999973297119140625) * _3494)), _6978, _6976.y)) + _6976.zw;
        mediump vec3 _8492;
        if (_3237)
        {
            float _7039 = _s0_b2.uEnvironmentData.values.x * _4173;
            mediump vec4 _7024 = textureLod(s0_b7, _8100, _7039);
            vec4 _8466;
            if (_7024.w < 0.5)
            {
                vec4 _7059 = textureLod(s0_b10, _6855 * (-_3490), _7039);
                vec3 _7064 = (_7059.xyz * (1.0 / _7059.w)) * _s0_b2.uEnvironmentData.indirectSpecularColorFactor.xyz;
                _8466 = vec4(_7064.x, _7064.y, _7064.z, _7024.w);
            }
            else
            {
                _8466 = _7024;
            }
            _8492 = mix(_3579 * (1.0 - _8472), _8466.xyz * _8113.xyz, vec3(_8472));
        }
        else
        {
            _8492 = _3579;
        }
        _8493 = _6722 * ((_4116 * _6996.x) + vec3(_6996.y * clamp(50.0 * max(_4107.x, max(_4107.y, _4107.z)), 0.0, 1.0)));
        _8491 = _8492;
    }
    else
    {
        _8493 = _6722;
        _8491 = vec3(0.0);
    }
    vec3 _7121 = vec4(_8498 + (_8491 + _8493), _8113.w).xyz;
    vec3 _8507;
    if ((CORE_CAMERA_FLAGS & 1u) == 1u)
    {
        vec3 _7128 = inPos - _s0_b0.uCameras[_4177].viewInv[3].xyz;
        float _7130 = _7128.y;
        float _7135 = dot(_7128, _7128);
        float _7137 = inversesqrt(_7135);
        float _7140 = _7135 * _7137;
        float _8503;
        float _8504;
        float _8505;
        if (_s0_b3.uFogData.baseFactors.x > 0.0)
        {
            float _7148 = _s0_b3.uFogData.baseFactors.x * _7137;
            _8505 = fma(-_s0_b3.uFogData.baseFactors.x, _7137, 1.0) * _7140;
            _8504 = fma(_7148, _7130, _s0_b0.uCameras[_4177].viewInv[3].y);
            _8503 = fma(-_7148, _7130, _7130);
        }
        else
        {
            _8505 = _7140;
            _8504 = _s0_b0.uCameras[_4177].viewInv[3].y;
            _8503 = _7130;
        }
        float _7250 = max(-127.0, _s0_b3.uFogData.firstLayer.y * _8503);
        float _7291 = max(-127.0, _s0_b3.uFogData.secondLayer.y * _8503);
        _8507 = mix(_7121, (_s0_b3.uFogData.inscatteringColor.xyz * _s0_b3.uFogData.inscatteringColor.w) + (_s0_b3.uFogData.envMapFactor.xyz * _s0_b3.uFogData.envMapFactor.w), vec3(((_s0_b3.uFogData.baseFactors.y > 0.0) && (_8505 > _s0_b3.uFogData.baseFactors.y)) ? 0.0 : min(1.0 - clamp(exp2(-(fma(_s0_b3.uFogData.firstLayer.x * exp2(-max(-127.0, _s0_b3.uFogData.firstLayer.y * (_8504 - _s0_b3.uFogData.firstLayer.z))), (abs(_7250) > 0.004999999888241291046142578125) ? ((1.0 - exp2(-_7250)) / _7250) : fma(-0.2402265071868896484375, _7250, 0.693147182464599609375), (_s0_b3.uFogData.secondLayer.x * exp2(-max(-127.0, _s0_b3.uFogData.secondLayer.y * (_8504 - _s0_b3.uFogData.secondLayer.z)))) * ((abs(_7291) > 0.004999999888241291046142578125) ? ((1.0 - exp2(-_7291)) / _7291) : fma(-0.2402265071868896484375, _7291, 0.693147182464599609375))) * _8505)), 0.0, 1.0), _s0_b3.uFogData.baseFactors.z)));
    }
    else
    {
        _8507 = _7121;
    }
    vec4 _7328 = _s0_b0.uCameras[_4177].viewProj * vec4(inPos, 1.0);
    vec4 _7337 = _s0_b0.uCameras[_4177].viewProjPrevFrame * vec4(inPrevPosI.xyz, 1.0);
    vec3 _7393 = _8138 / vec3((abs(_8138.x) + abs(_8138.y)) + abs(_8138.z));
    vec2 _8514;
    if (_7393.z >= 0.0)
    {
        _8514 = _7393.xy;
    }
    else
    {
        _8514 = (vec2(1.0) - abs(_7393.yx)) * vec2((_7393.x >= 0.0) ? 1.0 : (-1.0), (_7393.y >= 0.0) ? 1.0 : (-1.0));
    }
    outVelocityNormal = vec4(((((_7328.xy / vec2(_7328.w)) * 0.5) + vec2(0.5)) - (((_7337.xy / vec2(_7337.w)) * 0.5) + vec2(0.5))) * _s0_b1.uGeneralData.viewportSizeInvViewportSize.xy, (_8514.xy * 0.5) + vec2(0.5));
    outColor = vec4(clamp(_8507, vec3(0.0), vec3(64512.0)) * _8113.w, _8113.w);
    if (_3317)
    {
        vec3 _8517;
        if ((_s0_b5.uPostProcessData.flags.x & 1u) == 1u)
        {
            vec3 _7531 = outColor.xyz * _s0_b5.uPostProcessData.factors[0].x;
            uint _7534 = uint(_s0_b5.uPostProcessData.factors[0].w);
            vec3 _8518;
            if (_7534 == 0u)
            {
                _8518 = (_7531 * ((_7531 * 2.5099999904632568359375) + vec3(0.02999999932944774627685546875))) / fma(_7531, (_7531 * 2.4300000667572021484375) + vec3(0.589999973773956298828125), vec3(0.14000000059604644775390625));
            }
            else
            {
                vec3 _8519;
                if (_7534 == 1u)
                {
                    _8519 = (_7531 * ((_7531 * 15.80000019073486328125) + vec3(2.11999988555908203125))) / fma(_7531, (_7531 * 1.2000000476837158203125) + vec3(5.9200000762939453125), vec3(1.89999997615814208984375));
                }
                else
                {
                    vec3 _8520;
                    if (_7534 == 2u)
                    {
                        vec3 _7551 = _7531 * 6.0;
                        vec3 _7608 = _7551 * 0.1500000059604644775390625;
                        _8520 = ((fma(_7551, _7608 + vec3(0.0500000007450580596923828125), vec3(0.0040000001899898052215576171875)) / fma(_7551, _7608 + vec3(0.5), vec3(0.0599999986588954925537109375))) - vec3(0.066666670143604278564453125)) * vec3(1.3790643215179443359375);
                    }
                    else
                    {
                        _8520 = outColor.xyz;
                    }
                    _8519 = _8520;
                }
                _8518 = _8519;
            }
            _8517 = _8518;
        }
        else
        {
            _8517 = outColor.xyz;
        }
        vec2 _7482 = _8100 * _s0_b5.uPostProcessData.renderTimings.y;
        vec3 _8525;
        if ((_s0_b5.uPostProcessData.flags.x & 4u) == 4u)
        {
            _8525 = _8517.xyz + vec3(fract(sin(dot(vec2(_7482.x * _s0_b5.uPostProcessData.factors[2].y, _7482.y * _s0_b5.uPostProcessData.factors[2].z), vec2(12.98980045318603515625, 78.233001708984375))) * 43758.546875) * _s0_b5.uPostProcessData.factors[2].x);
        }
        else
        {
            _8525 = _8517.xyz;
        }
        vec3 _8527;
        if ((_s0_b5.uPostProcessData.flags.x & 2u) == 2u)
        {
            vec2 _7689 = _8100 * (vec2(1.0) - _8100.yx);
            _8527 = _8525.xyz * clamp(pow(((_7689.x * _7689.y) * _s0_b5.uPostProcessData.factors[1].x) * 40.0, _s0_b5.uPostProcessData.factors[1].y), 0.0, 1.0);
        }
        else
        {
            _8527 = _8525.xyz;
        }
        vec3 _8529;
        if ((_s0_b5.uPostProcessData.flags.x & 8u) == 8u)
        {
            vec3 _8530;
            if (uint(_s0_b5.uPostProcessData.factors[3].w) == 1u)
            {
                _8530 = mix((pow(_8527.xyz, vec3(0.41600000858306884765625)) * 1.05499994754791259765625) - vec3(0.054999999701976776123046875), _8527.xyz * 12.9200000762939453125, lessThan(_8527.xyz, vec3(0.003130800090730190277099609375)));
            }
            else
            {
                _8530 = _8527.xyz;
            }
            _8529 = _8530;
        }
        else
        {
            _8529 = _8527.xyz;
        }
        outColor = vec4(_8529.x, _8529.y, _8529.z, outColor.w);
    }
}

