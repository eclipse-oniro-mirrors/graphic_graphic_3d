#version 320 es
precision highp float;
precision highp int;

uniform float CORE_FLIP_NDC ;

struct DefaultCameraMatrixStruct
{
    mat4 view;
    mat4 proj;
    mat4 viewProj;
    mat4 viewInv;
    mat4 projInv;
    mat4 viewProjInv;
    mat4 viewPrevFrame;
    mat4 projPrevFrame;
    mat4 viewProjPrevFrame;
    mat4 shadowViewProj;
    mat4 shadowViewProjInv;
    vec4 jitter;
    vec4 jitterPrevFrame;
    uvec4 indices;
    uvec4 multiViewIndices;
    vec4 frustumPlanes[6];
    uvec4 counts;
    uvec4 pad0;
    mat4 matPad0;
    mat4 matPad1;
};

struct DefaultMaterialFogStruct
{
    uvec4 indices;
    vec4 firstLayer;
    vec4 secondLayer;
    vec4 baseFactors;
    vec4 inscatteringColor;
    vec4 envMapFactor;
    vec4 additionalFactor;
};

struct GlobalPostProcessStruct
{
    uvec4 flags;
    vec4 renderTimings;
    vec4 factors[14];
    vec4 userFactors[16];
};

struct DefaultMaterialSingleMaterialStruct
{
    vec4 factors[15];
    uvec4 indices;
};

struct DefaultMaterialMaterialStruct
{
    DefaultMaterialSingleMaterialStruct material[64];
};

#ifndef SPIRV_CROSS_CONSTANT_ID_1
#define SPIRV_CROSS_CONSTANT_ID_1 0u
#endif
const uint CORE_MATERIAL_FLAGS = SPIRV_CROSS_CONSTANT_ID_1;
const uint _2292 = (CORE_MATERIAL_FLAGS & 8u);
const bool _2293 = (_2292 == 8u);

struct DefaultMaterialTransformSingleMaterialStruct
{
    uvec4 _packed[15];
    uvec4 indices;
};

struct DefaultMaterialTransformMaterialStruct
{
    DefaultMaterialTransformSingleMaterialStruct material[64];
};

const uint _2344 = (CORE_MATERIAL_FLAGS & 8u);
const bool _2345 = (_2344 == 8u);
const uint _2638 = (CORE_MATERIAL_FLAGS & 128u);
const bool _2639 = (_2638 == 128u);
const uint _2650 = (CORE_MATERIAL_FLAGS & 256u);
const bool _2651 = (_2650 == 256u);

struct DefaultMaterialGeneralDataStruct
{
    uvec4 indices;
    vec4 viewportSizeInvViewportSize;
    vec4 sceneTimingData;
};

const uint _2735 = (CORE_MATERIAL_FLAGS & 64u);
const bool _2736 = (_2735 == 64u);
const uint _2773 = (CORE_MATERIAL_FLAGS & 16u);
const bool _2774 = (_2773 == 16u);

struct DefaultMaterialSingleLightStruct
{
    vec4 pos;
    vec4 dir;
    vec4 color;
    vec4 spotLightParams;
    vec4 shadowFactors;
    vec4 additionalFactor;
    uvec4 flags;
    uvec4 indices;
};

struct DefaultMaterialLightStruct
{
    uint directionalLightBeginIndex;
    uint directionalLightCount;
    uint pointLightBeginIndex;
    uint pointLightCount;
    uint spotLightBeginIndex;
    uint spotLightCount;
    uint pad0;
    uint pad1;
    uvec4 clusterSizes;
    vec4 clusterFactors;
    vec4 atlasSizeInvSize;
    vec4 additionalFactors;
    DefaultMaterialSingleLightStruct lights[64];
};

const uint _2965 = (CORE_MATERIAL_FLAGS & 1u);
const bool _2966 = (_2965 == 1u);
#ifndef SPIRV_CROSS_CONSTANT_ID_2
#define SPIRV_CROSS_CONSTANT_ID_2 0u
#endif
const uint CORE_LIGHTING_FLAGS = SPIRV_CROSS_CONSTANT_ID_2;
const uint _2996 = (CORE_LIGHTING_FLAGS & 1u);
const bool _2997 = (_2996 == 1u);
const uint _3048 = (CORE_LIGHTING_FLAGS & 4u);
const bool _3049 = (_3048 == 4u);
const uint _3104 = (CORE_MATERIAL_FLAGS & 1u);
const bool _3105 = (_3104 == 1u);
const uint _3133 = (CORE_LIGHTING_FLAGS & 1u);
const bool _3134 = (_3133 == 1u);
const uint _3228 = (CORE_LIGHTING_FLAGS & 2u);
const bool _3229 = (_3228 == 2u);
const uint _3325 = (CORE_MATERIAL_FLAGS & 16384u);
const bool _3326 = (_3325 == 16384u);

struct DefaultMaterialEnvironmentStruct
{
    vec4 indirectSpecularColorFactor;
    vec4 indirectDiffuseColorFactor;
    vec4 envMapColorFactor;
    vec4 values;
    vec4 blendFactor;
    mat4 envRotation;
    uvec4 indices;
    vec4 shIndirectCoefficients[9];
    vec4 pad0;
};

const uint _3515 = (CORE_MATERIAL_FLAGS & 128u);
const bool _3516 = (_3515 == 128u);
const uint _3527 = (CORE_MATERIAL_FLAGS & 256u);
const bool _3528 = (_3527 == 256u);
const uint _3574 = (CORE_MATERIAL_FLAGS & 128u);
const bool _3575 = (_3574 == 128u);
const uint _3586 = (CORE_MATERIAL_FLAGS & 256u);
const bool _3587 = (_3586 == 256u);
const uint _3629 = (CORE_MATERIAL_FLAGS & 1u);
const bool _3630 = (_3629 == 1u);
const uint _3657 = (CORE_LIGHTING_FLAGS & 1u);
const bool _3658 = (_3657 == 1u);
const uint _3691 = (CORE_LIGHTING_FLAGS & 4u);
const bool _3692 = (_3691 == 4u);
const uint _3735 = (CORE_MATERIAL_FLAGS & 1u);
const bool _3736 = (_3735 == 1u);
const uint _3763 = (CORE_LIGHTING_FLAGS & 1u);
const bool _3764 = (_3763 == 1u);
const uint _3897 = (CORE_MATERIAL_FLAGS & 4u);
const bool _3898 = (_3897 == 4u);
const uint _3921 = (CORE_MATERIAL_FLAGS & 16u);
const bool _3922 = (_3921 == 16u);
#ifndef SPIRV_CROSS_CONSTANT_ID_0
#define SPIRV_CROSS_CONSTANT_ID_0 0u
#endif
const uint CORE_MATERIAL_TYPE = SPIRV_CROSS_CONSTANT_ID_0;
const bool _3957 = (CORE_MATERIAL_TYPE == 1u);
const uint _3969 = (CORE_MATERIAL_FLAGS & 512u);
const bool _3970 = (_3969 == 512u);
const uint _4016 = (CORE_MATERIAL_FLAGS & 16u);
const bool _4017 = (_4016 == 16u);
const uint _4024 = (CORE_MATERIAL_FLAGS & 64u);
const bool _4025 = (_4024 == 64u);
const uint _4041 = (CORE_MATERIAL_FLAGS & 32u);
const bool _4042 = (_4041 == 32u);

struct DefaultMaterialSingleMeshStruct
{
    mat4 world;
    mat4 normalWorld;
    mat4 prevWorld;
    uvec4 indices;
    uvec4 layers;
    uvec4 customData[2];
};

struct DefaultMaterialMeshStruct
{
    DefaultMaterialSingleMeshStruct mesh[64];
};

const uint _4093 = (CORE_MATERIAL_FLAGS & 1024u);
const bool _4094 = (_4093 == 1024u);
const uint _4105 = (CORE_MATERIAL_FLAGS & 2048u);
const bool _4106 = (_4105 == 2048u);
const uint _4153 = (CORE_MATERIAL_FLAGS & 64u);
const bool _4154 = (_4153 == 64u);
const uint _4171 = (CORE_MATERIAL_FLAGS & 16u);
const bool _4172 = (_4171 == 16u);
const uint _4205 = (CORE_MATERIAL_FLAGS & 32u);
const bool _4206 = (_4205 == 32u);
#ifndef SPIRV_CROSS_CONSTANT_ID_4
#define SPIRV_CROSS_CONSTANT_ID_4 0u
#endif
const uint CORE_CAMERA_FLAGS = SPIRV_CROSS_CONSTANT_ID_4;
const bool _4301 = (CORE_MATERIAL_TYPE == 2u);
const bool _4307 = (CORE_MATERIAL_TYPE == 3u);
#ifndef SPIRV_CROSS_CONSTANT_ID_3
#define SPIRV_CROSS_CONSTANT_ID_3 0u
#endif
const uint CORE_POST_PROCESS_FLAGS = SPIRV_CROSS_CONSTANT_ID_3;
const bool _4314 = (CORE_POST_PROCESS_FLAGS > 0u);

layout(std140) uniform s0_b0
{
    DefaultCameraMatrixStruct uCameras[16];
} _s0_b0;

layout(std140) uniform s0_b3
{
    DefaultMaterialFogStruct uFogData;
} _s0_b3;

layout(std140) uniform s0_b5
{
    GlobalPostProcessStruct uPostProcessData;
} _s0_b5;

layout(std140) uniform s1_b2
{
    DefaultMaterialMaterialStruct uMaterialData;
} _s1_b2;

layout(std140) uniform s1_b3
{
    DefaultMaterialTransformMaterialStruct uMaterialTransformData;
} _s1_b3;

layout(std140) uniform s0_b1
{
    DefaultMaterialGeneralDataStruct uGeneralData;
} _s0_b1;

layout(std140) uniform s0_b4
{
    DefaultMaterialLightStruct uLightData;
} _s0_b4;

layout(std140) uniform s0_b2
{
    DefaultMaterialEnvironmentStruct uEnvironmentData;
} _s0_b2;

layout(std140) uniform s1_b0
{
    DefaultMaterialMeshStruct uMeshMatrix;
} _s1_b0;

uniform mediump sampler2D s2_b0;
uniform mediump sampler2D s2_b1[10];
uniform highp sampler2D s0_b8;
uniform highp sampler2DShadow s0_b9;
uniform highp samplerCube s0_b10;
uniform mediump sampler2D s0_b7;

layout(location = 6) flat in uint inIndices;
layout(location = 4) in vec4 inUv;
layout(location = 5) in mediump vec4 inColor;
layout(location = 1) out vec4 outVelocityNormal;
layout(location = 0) in vec3 inPos;
layout(location = 3) in vec4 inPrevPosI;
layout(location = 1) in vec3 inNormal;
layout(location = 2) in vec4 inTangentW;
layout(location = 0) out vec4 outColor;

vec4 _12692;
float _12827;
vec3 _13545;

void main()
{
    if (_4301)
    {
        uint _14275;
        if (_3326)
        {
            _14275 = inIndices >> uint(16);
        }
        else
        {
            _14275 = 0u;
        }
        uint _4478 = floatBitsToUint(_s1_b2.uMaterialData.material[_14275].factors[11].y);
        vec2 _14276;
        if (((_4478 >> uint(16)) & 1u) == 1u)
        {
            _14276 = inUv.zw;
        }
        else
        {
            _14276 = inUv.xy;
        }
        vec2 _14283;
        if (_2345 && (((_4478 & 65535u) & 1u) == 1u))
        {
            _14283 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_14275]._packed[0u].x).xy, _14276), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_14275]._packed[0u].y).xy, _14276)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_14275]._packed[0u].z).xy;
        }
        else
        {
            _14283 = _14276;
        }
        mediump vec4 _4428 = texture(s2_b0, _14283);
        vec4 _4375 = (_4428 * _s1_b2.uMaterialData.material[_14275].factors[0]) * inColor;
        mediump float _4378 = clamp(_4375.w, 0.0, 1.0);
        mediump vec4 _12421 = _4375;
        _12421.w = _4378;
        if (_3516)
        {
            if (_4378 < _s1_b2.uMaterialData.material[_14275].factors[11].x)
            {
                discard;
            }
        }
        mediump vec4 _14288;
        if (_3528)
        {
            mediump vec4 _12424 = _12421;
            _12424.w = 1.0;
            _14288 = _12424;
        }
        else
        {
            _14288 = _12421;
        }
        uint _4540 = inIndices & 65535u;
        vec4 _4555 = _s0_b0.uCameras[_4540].viewProj * vec4(inPos, 1.0);
        vec4 _4564 = _s0_b0.uCameras[_4540].viewProjPrevFrame * vec4(inPrevPosI.xyz, 1.0);
        vec3 _4620 = inNormal / vec3((abs(inNormal.x) + abs(inNormal.y)) + abs(inNormal.z));
        vec2 _14285;
        if (_4620.z >= 0.0)
        {
            _14285 = _4620.xy;
        }
        else
        {
            _14285 = (vec2(1.0) - abs(_4620.yx)) * vec2((_4620.x >= 0.0) ? 1.0 : (-1.0), (_4620.y >= 0.0) ? 1.0 : (-1.0));
        }
        outVelocityNormal = vec4(((((_4555.xy / vec2(_4555.w)) * 0.5) + vec2(0.5)) - (((_4564.xy / vec2(_4564.w)) * 0.5) + vec2(0.5))) * _s0_b1.uGeneralData.viewportSizeInvViewportSize.xy, (_14285.xy * 0.5) + vec2(0.5));
        outColor = _14288;
    }
    else
    {
        if (_4307)
        {
            uint _14194;
            if (_3326)
            {
                _14194 = inIndices >> uint(16);
            }
            else
            {
                _14194 = 0u;
            }
            uint _5042 = floatBitsToUint(_s1_b2.uMaterialData.material[_14194].factors[11].y);
            vec2 _14195;
            if (((_5042 >> uint(16)) & 1u) == 1u)
            {
                _14195 = inUv.zw;
            }
            else
            {
                _14195 = inUv.xy;
            }
            vec2 _14202;
            if (_2345 && (((_5042 & 65535u) & 1u) == 1u))
            {
                _14202 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_14194]._packed[0u].x).xy, _14195), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_14194]._packed[0u].y).xy, _14195)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_14194]._packed[0u].z).xy;
            }
            else
            {
                _14202 = _14195;
            }
            mediump vec4 _4992 = texture(s2_b0, _14202);
            vec4 _4735 = (_4992 * _s1_b2.uMaterialData.material[_14194].factors[0]) * inColor;
            mediump float _4738 = clamp(_4735.w, 0.0, 1.0);
            mediump vec4 _12439 = _4735;
            _12439.w = _4738;
            if (_3575)
            {
                if (_4738 < _s1_b2.uMaterialData.material[_14194].factors[11].x)
                {
                    discard;
                }
            }
            mediump vec4 _14208;
            if (_3587)
            {
                mediump vec4 _12442 = _12439;
                _12442.w = 1.0;
                _14208 = _12442;
            }
            else
            {
                _14208 = _12439;
            }
            vec3 _4753 = normalize(inNormal);
            mediump float _14211;
            _14211 = 1.0;
            mediump float _4820;
            for (uint _14204 = 0u; _14204 < _s0_b4.uLightData.directionalLightCount; _14211 = _4820, _14204++)
            {
                uint _4768 = _s0_b4.uLightData.directionalLightBeginIndex + _14204;
                mediump float _14252;
                if (_3630)
                {
                    mediump float _14253;
                    if ((_s0_b4.uLightData.lights[_4768].flags.x & 8u) == 8u)
                    {
                        vec4 _4795 = _s0_b0.uCameras[_s0_b4.uLightData.lights[_4768].flags.y].shadowViewProj * vec4(inPos, 1.0);
                        mediump float _14254;
                        if (_3658)
                        {
                            vec3 _5123 = _4795.xyz / vec3(_4795.w);
                            float _5127 = float(_s0_b4.uLightData.lights[_4768].flags.z);
                            float _5187 = _5123.z;
                            bool _5188 = _5187 > 0.0;
                            bool _5194;
                            if (_5188)
                            {
                                _5194 = _5123.x > (_s0_b4.uLightData.lights[_4768].shadowFactors.w * _5127);
                            }
                            else
                            {
                                _5194 = _5188;
                            }
                            bool _5200;
                            if (_5194)
                            {
                                _5200 = _5123.x < fma(_s0_b4.uLightData.lights[_4768].shadowFactors.w, _5127, _s0_b4.uLightData.lights[_4768].shadowFactors.w);
                            }
                            else
                            {
                                _5200 = _5194;
                            }
                            mediump float _14248;
                            if (_5200)
                            {
                                vec4 _5135 = texture(s0_b8, _5123.xy);
                                float _5140 = _5135.x;
                                mediump float _14251;
                                if (_5187 > _5140)
                                {
                                    float _5152 = max(fma(-_5140, _5140, _5135.y), 9.9999997473787516355514526367188e-06);
                                    float _5157 = _5187 - _5140;
                                    _14251 = fma(clamp(((_5152 / fma(_5157, _5157, _5152)) - 0.20000000298023223876953125) * 1.25, 0.0, 1.0) - 1.0, _s0_b4.uLightData.lights[_4768].shadowFactors.x, 1.0);
                                }
                                else
                                {
                                    _14251 = 1.0;
                                }
                                _14248 = _14251;
                            }
                            else
                            {
                                _14248 = 1.0;
                            }
                            _14254 = _14248;
                        }
                        else
                        {
                            vec3 _5253 = _4795.xyz / vec3(_4795.w);
                            float _5257 = float(_s0_b4.uLightData.lights[_4768].flags.z);
                            float _5478 = _5253.z;
                            bool _5479 = _5478 > 0.0;
                            bool _5485;
                            if (_5479)
                            {
                                _5485 = _5253.x > (_s0_b4.uLightData.lights[_4768].shadowFactors.w * _5257);
                            }
                            else
                            {
                                _5485 = _5479;
                            }
                            bool _5491;
                            if (_5485)
                            {
                                _5491 = _5253.x < fma(_s0_b4.uLightData.lights[_4768].shadowFactors.w, _5257, _s0_b4.uLightData.lights[_4768].shadowFactors.w);
                            }
                            else
                            {
                                _5491 = _5485;
                            }
                            mediump float _14245;
                            if (_5491)
                            {
                                vec2 _5280 = fma(_5253.xy, _s0_b4.uLightData.atlasSizeInvSize.xy, vec2(0.5));
                                vec2 _5283 = floor(_5280) - vec2(0.5);
                                float _5288 = fract(_5280.x);
                                float _5291 = fract(_5280.y);
                                float _5300 = _5478 - max(_s0_b4.uLightData.lights[_4768].shadowFactors.z * (1.0 - clamp(dot(_4753, -_s0_b4.uLightData.lights[_4768].dir.xyz), 0.0, 1.0)), _s0_b4.uLightData.lights[_4768].shadowFactors.y);
                                float _5303 = fma(-3.0, _5288, 4.0);
                                float _5306 = fma(3.0, _5288, 1.0);
                                float _5312 = (fma(-2.0, _5288, 3.0) / _5303) - 2.0;
                                float _5315 = (3.0 + _5288) * 0.14285714924335479736328125;
                                float _5319 = (_5288 / _5306) + 2.0;
                                float _5322 = fma(-3.0, _5291, 4.0);
                                float _5325 = fma(3.0, _5291, 1.0);
                                float _5331 = (fma(-2.0, _5291, 3.0) / _5322) - 2.0;
                                float _5334 = (3.0 + _5291) * 0.14285714924335479736328125;
                                float _5338 = (_5291 / _5325) + 2.0;
                                _14245 = fma(fma(_5306 * _5325, texture(s0_b9, vec3(vec3(_s0_b4.uLightData.atlasSizeInvSize.zw * (_5283 + vec2(_5319, _5338)), _5300).xy, _5300)), fma(7.0 * _5325, texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5315, _5338) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)), fma(_5303 * _5325, texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5312, _5338) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)), fma(_5306 * 7.0, texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5319, _5334) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)), fma(49.0, texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5315, _5334) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)), fma(_5303 * 7.0, texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5312, _5334) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)), fma(_5306 * _5322, texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5319, _5331) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)), fma(_5303 * _5322, texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5312, _5331) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)), (7.0 * _5322) * texture(s0_b9, vec3(vec3(fma(_5283, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5315, _5331) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5300).xy, _5300)))))))))) * (-0.0069444444961845874786376953125), _s0_b4.uLightData.lights[_4768].shadowFactors.x, 1.0);
                            }
                            else
                            {
                                _14245 = 1.0;
                            }
                            _14254 = _14245;
                        }
                        _14253 = _14254;
                    }
                    else
                    {
                        _14253 = 1.0;
                    }
                    _14252 = _14253;
                }
                else
                {
                    _14252 = 1.0;
                }
                _4820 = _14211 * _14252;
            }
            mediump float _14210;
            if (_3692)
            {
                mediump float _14212;
                _14212 = _14211;
                float _4945;
                for (uint _14205 = 0u; _14205 < _s0_b4.uLightData.spotLightCount; _14212 = _4945, _14205++)
                {
                    uint _4838 = _s0_b4.uLightData.spotLightBeginIndex + _14205;
                    vec3 _4844 = _s0_b4.uLightData.lights[_4838].pos.xyz - inPos;
                    float _4846 = length(_4844);
                    vec3 _4850 = _4844 / vec3(_4846);
                    mediump float _14222;
                    if (_3736)
                    {
                        mediump float _14223;
                        if ((_s0_b4.uLightData.lights[_4838].flags.x & 8u) == 8u)
                        {
                            vec4 _4872 = _s0_b0.uCameras[_s0_b4.uLightData.lights[_4838].flags.y].shadowViewProj * vec4(inPos, 1.0);
                            mediump float _14224;
                            if (_3764)
                            {
                                vec3 _5639 = _4872.xyz / vec3(_4872.w);
                                float _5643 = float(_s0_b4.uLightData.lights[_4838].flags.z);
                                float _5703 = _5639.z;
                                bool _5704 = _5703 > 0.0;
                                bool _5710;
                                if (_5704)
                                {
                                    _5710 = _5639.x > (_s0_b4.uLightData.lights[_4838].shadowFactors.w * _5643);
                                }
                                else
                                {
                                    _5710 = _5704;
                                }
                                bool _5716;
                                if (_5710)
                                {
                                    _5716 = _5639.x < fma(_s0_b4.uLightData.lights[_4838].shadowFactors.w, _5643, _s0_b4.uLightData.lights[_4838].shadowFactors.w);
                                }
                                else
                                {
                                    _5716 = _5710;
                                }
                                mediump float _14218;
                                if (_5716)
                                {
                                    vec4 _5651 = texture(s0_b8, _5639.xy);
                                    float _5656 = _5651.x;
                                    mediump float _14221;
                                    if (_5703 > _5656)
                                    {
                                        float _5668 = max(fma(-_5656, _5656, _5651.y), 9.9999997473787516355514526367188e-06);
                                        float _5673 = _5703 - _5656;
                                        _14221 = fma(clamp(((_5668 / fma(_5673, _5673, _5668)) - 0.20000000298023223876953125) * 1.25, 0.0, 1.0) - 1.0, _s0_b4.uLightData.lights[_4838].shadowFactors.x, 1.0);
                                    }
                                    else
                                    {
                                        _14221 = 1.0;
                                    }
                                    _14218 = _14221;
                                }
                                else
                                {
                                    _14218 = 1.0;
                                }
                                _14224 = _14218;
                            }
                            else
                            {
                                vec3 _5769 = _4872.xyz / vec3(_4872.w);
                                float _5773 = float(_s0_b4.uLightData.lights[_4838].flags.z);
                                float _5994 = _5769.z;
                                bool _5995 = _5994 > 0.0;
                                bool _6001;
                                if (_5995)
                                {
                                    _6001 = _5769.x > (_s0_b4.uLightData.lights[_4838].shadowFactors.w * _5773);
                                }
                                else
                                {
                                    _6001 = _5995;
                                }
                                bool _6007;
                                if (_6001)
                                {
                                    _6007 = _5769.x < fma(_s0_b4.uLightData.lights[_4838].shadowFactors.w, _5773, _s0_b4.uLightData.lights[_4838].shadowFactors.w);
                                }
                                else
                                {
                                    _6007 = _6001;
                                }
                                mediump float _14215;
                                if (_6007)
                                {
                                    vec2 _5796 = fma(_5769.xy, _s0_b4.uLightData.atlasSizeInvSize.xy, vec2(0.5));
                                    vec2 _5799 = floor(_5796) - vec2(0.5);
                                    float _5804 = fract(_5796.x);
                                    float _5807 = fract(_5796.y);
                                    float _5816 = _5994 - max(_s0_b4.uLightData.lights[_4838].shadowFactors.z * (1.0 - clamp(dot(_4753, _4850), 0.0, 1.0)), _s0_b4.uLightData.lights[_4838].shadowFactors.y);
                                    float _5819 = fma(-3.0, _5804, 4.0);
                                    float _5822 = fma(3.0, _5804, 1.0);
                                    float _5828 = (fma(-2.0, _5804, 3.0) / _5819) - 2.0;
                                    float _5831 = (3.0 + _5804) * 0.14285714924335479736328125;
                                    float _5835 = (_5804 / _5822) + 2.0;
                                    float _5838 = fma(-3.0, _5807, 4.0);
                                    float _5841 = fma(3.0, _5807, 1.0);
                                    float _5847 = (fma(-2.0, _5807, 3.0) / _5838) - 2.0;
                                    float _5850 = (3.0 + _5807) * 0.14285714924335479736328125;
                                    float _5854 = (_5807 / _5841) + 2.0;
                                    _14215 = fma(fma(_5822 * _5841, texture(s0_b9, vec3(vec3(_s0_b4.uLightData.atlasSizeInvSize.zw * (_5799 + vec2(_5835, _5854)), _5816).xy, _5816)), fma(7.0 * _5841, texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5831, _5854) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)), fma(_5819 * _5841, texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5828, _5854) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)), fma(_5822 * 7.0, texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5835, _5850) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)), fma(49.0, texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5831, _5850) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)), fma(_5819 * 7.0, texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5828, _5850) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)), fma(_5822 * _5838, texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5835, _5847) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)), fma(_5819 * _5838, texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5828, _5847) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)), (7.0 * _5838) * texture(s0_b9, vec3(vec3(fma(_5799, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_5831, _5847) * _s0_b4.uLightData.atlasSizeInvSize.zw), _5816).xy, _5816)))))))))) * (-0.0069444444961845874786376953125), _s0_b4.uLightData.lights[_4838].shadowFactors.x, 1.0);
                                }
                                else
                                {
                                    _14215 = 1.0;
                                }
                                _14224 = _14215;
                            }
                            _14223 = _14224;
                        }
                        else
                        {
                            _14223 = 1.0;
                        }
                        _14222 = _14223;
                    }
                    else
                    {
                        _14222 = 1.0;
                    }
                    float _4913 = clamp(fma(dot(_s0_b4.uLightData.lights[_4838].dir.xyz, -_4850), _s0_b4.uLightData.lights[_4838].spotLightParams.x, _s0_b4.uLightData.lights[_4838].spotLightParams.y), 0.0, 1.0);
                    _4945 = _14212 * fma(_14222 - 1.0, min(1.0, ((_4913 * _4913) * (max(min(1.0 - pow(_4846 / _s0_b4.uLightData.lights[_4838].dir.w, 4.0), 1.0), 0.0) / (_4846 * _4846))) * _s0_b4.uLightData.lights[_4838].color.w), 1.0);
                }
                _14210 = _14212;
            }
            else
            {
                _14210 = _14211;
            }
            uint _6137 = inIndices & 65535u;
            vec4 _6152 = _s0_b0.uCameras[_6137].viewProj * vec4(inPos, 1.0);
            vec4 _6161 = _s0_b0.uCameras[_6137].viewProjPrevFrame * vec4(inPrevPosI.xyz, 1.0);
            vec3 _6217 = _4753 / vec3((abs(_4753.x) + abs(_4753.y)) + abs(_4753.z));
            vec2 _14213;
            if (_6217.z >= 0.0)
            {
                _14213 = _6217.xy;
            }
            else
            {
                _14213 = (vec2(1.0) - abs(_6217.yx)) * vec2((_6217.x >= 0.0) ? 1.0 : (-1.0), (_6217.y >= 0.0) ? 1.0 : (-1.0));
            }
            outVelocityNormal = vec4(((((_6152.xy / vec2(_6152.w)) * 0.5) + vec2(0.5)) - (((_6161.xy / vec2(_6161.w)) * 0.5) + vec2(0.5))) * _s0_b1.uGeneralData.viewportSizeInvViewportSize.xy, (_14213.xy * 0.5) + vec2(0.5));
            outColor = _14208 * clamp(1.0 - _14210, 0.0, 1.0);
        }
        else
        {
            uint _12688;
            if (_3326)
            {
                _12688 = inIndices >> uint(16);
            }
            else
            {
                _12688 = 0u;
            }
            uint _6749 = floatBitsToUint(_s1_b2.uMaterialData.material[_12688].factors[11].y);
            uint _6712 = _6749 >> uint(16);
            vec2 _12689;
            if ((_6712 & 1u) == 1u)
            {
                _12689 = inUv.zw;
            }
            else
            {
                _12689 = inUv.xy;
            }
            uint _6726 = _6749 & 65535u;
            vec2 _12698;
            if (_2345 && ((_6726 & 1u) == 1u))
            {
                _12698 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[0u].x).xy, _12689), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[0u].y).xy, _12689)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[0u].z).xy;
            }
            else
            {
                _12698 = _12689;
            }
            mediump vec4 _6699 = texture(s2_b0, _12698);
            vec4 _6666 = (_6699 * _s1_b2.uMaterialData.material[_12688].factors[0]) * inColor;
            mediump float _6669 = clamp(_6666.w, 0.0, 1.0);
            if (_2639)
            {
                if (_6669 < _s1_b2.uMaterialData.material[_12688].factors[11].x)
                {
                    discard;
                }
            }
            mediump vec4 _12701;
            if (_2651)
            {
                mediump vec4 _12504 = _6666;
                _12504.w = 1.0;
                _12701 = _12504;
            }
            else
            {
                vec4 _12700;
                do
                {
                    if (_6669 == 0.0)
                    {
                        _12700 = vec4(0.0);
                        break;
                    }
                    _12700 = vec4(_6666.xyz / vec3(_6669), _6669);
                    break;
                } while(false);
                _12701 = _12700;
            }
            vec3 _6364 = normalize(inNormal);
            vec3 _12754;
            vec3 _12958;
            if (_3898)
            {
                vec2 _12702;
                if ((_6712 & 2u) == 2u)
                {
                    _12702 = inUv.zw;
                }
                else
                {
                    _12702 = inUv.xy;
                }
                vec2 _12724;
                if (_2345 && ((_6726 & 2u) == 2u))
                {
                    _12724 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[1u].x).xy, _12702), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[1u].y).xy, _12702)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[1u].z).xy;
                }
                else
                {
                    _12724 = _12702;
                }
                mediump vec4 _6844 = texture(s2_b1[0], _12724);
                vec3 _6956 = normalize(inTangentW.xyz);
                mat3 _6978 = mat3(_6956, cross(_6364, _6956) * inTangentW.w, _6364);
                vec3 _12959;
                if (_3922)
                {
                    vec2 _12725;
                    if ((_6712 & 128u) == 128u)
                    {
                        _12725 = inUv.zw;
                    }
                    else
                    {
                        _12725 = inUv.xy;
                    }
                    vec2 _12753;
                    if (_2345 && ((_6726 & 128u) == 128u))
                    {
                        _12753 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[7u].x).xy, _12725), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[7u].y).xy, _12725)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[7u].z).xy;
                    }
                    else
                    {
                        _12753 = _12725;
                    }
                    _12959 = normalize(_6978 * normalize(((texture(s2_b1[6], _12753).xyz * 2.0) - vec3(1.0)) * vec3(_s1_b2.uMaterialData.material[_12688].factors[7].x, _s1_b2.uMaterialData.material[_12688].factors[7].x, 1.0)));
                }
                else
                {
                    _12959 = _6364;
                }
                _12958 = _12959;
                _12754 = normalize(_6978 * normalize(((_6844.xyz * 2.0) - vec3(1.0)) * vec3(_s1_b2.uMaterialData.material[_12688].factors[1].x, _s1_b2.uMaterialData.material[_12688].factors[1].x, 1.0)));
            }
            else
            {
                _12958 = _6364;
                _12754 = _6364;
            }
            vec3 _12758;
            if (gl_FrontFacing)
            {
                _12758 = _12754;
            }
            else
            {
                _12758 = -_12754;
            }
            vec2 _12759;
            if ((_6712 & 4u) == 4u)
            {
                _12759 = inUv.zw;
            }
            else
            {
                _12759 = inUv.xy;
            }
            vec2 _12802;
            if (_2345 && ((_6726 & 4u) == 4u))
            {
                _12802 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[2u].x).xy, _12759), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[2u].y).xy, _12759)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[2u].z).xy;
            }
            else
            {
                _12802 = _12759;
            }
            mediump vec4 _7141 = texture(s2_b1[1], _12802);
            vec4 _6405 = _7141 * _s1_b2.uMaterialData.material[_12688].factors[2];
            vec3 _13379;
            vec4 _13405;
            float _13420;
            float _13436;
            if (_3957)
            {
                vec4 _12522 = vec4(_6405.x, _6405.y, _6405.z, _12692.w);
                _12522.w = 1.0;
                mediump vec3 _7305 = dFdx(_6364);
                mediump vec3 _7307 = dFdy(_6364);
                mediump float _7321 = clamp(max(1.0 - clamp(_6405.w, 0.0, 1.0), pow(clamp(max(dot(_7305, _7305), dot(_7307, _7307)), 0.0, 1.0), 0.333000004291534423828125)), 0.08900000154972076416015625, 1.0);
                mediump float _7293 = _7321 * _7321;
                _13436 = _7321;
                _13420 = _7293 * _7293;
                _13405 = _12522;
                _13379 = _12701.xyz * (1.0 - max(_6405.x, max(_6405.y, _6405.z)));
            }
            else
            {
                vec3 _13380;
                vec4 _13406;
                float _13421;
                float _13437;
                if (_3970)
                {
                    vec2 _12834;
                    if ((_6712 & 1024u) == 1024u)
                    {
                        _12834 = inUv.zw;
                    }
                    else
                    {
                        _12834 = inUv.xy;
                    }
                    vec2 _12883;
                    if (_2345 && ((_6726 & 1024u) == 1024u))
                    {
                        _12883 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[10u].x).xy, _12834), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[10u].y).xy, _12834)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[10u].z).xy;
                    }
                    else
                    {
                        _12883 = _12834;
                    }
                    vec4 _6418 = texture(s2_b1[9], _12883) * _s1_b2.uMaterialData.material[_12688].factors[10];
                    mediump float _7447 = clamp(_6405.z, 0.0, 1.0);
                    mediump float _7467 = _6418.w;
                    vec3 _7468 = min(mix(vec3(_6405.w), _12701.xyz, vec3(_7447)).xyz * _6418.xyz, vec3(1.0)) * _7467;
                    vec3 _7485 = vec3(_7447);
                    vec3 _7495 = mix(_7468.xyz, _12701.xyz, _7485);
                    vec4 _12539 = vec4(_7495.x, _7495.y, _7495.z, _12692.w);
                    _12539.w = mix(_7467, 1.0, _7447);
                    mediump vec3 _7537 = dFdx(_6364);
                    mediump vec3 _7539 = dFdy(_6364);
                    mediump float _7553 = clamp(max(_6405.y, pow(clamp(max(dot(_7537, _7537), dot(_7539, _7539)), 0.0, 1.0), 0.333000004291534423828125)), 0.08900000154972076416015625, 1.0);
                    mediump float _7525 = _7553 * _7553;
                    _13437 = _7553;
                    _13421 = _7525 * _7525;
                    _13406 = _12539;
                    _13380 = mix(_12701.xyz * (1.0 - max(_7468.x, max(_7468.y, _7468.z))), vec3(0.0), _7485);
                }
                else
                {
                    mediump float _7562 = clamp(_6405.z, 0.0, 1.0);
                    mediump vec3 _7570 = mix(vec3(_6405.w), _12701.xyz, vec3(_7562));
                    vec4 _12544 = vec4(_7570.x, _7570.y, _7570.z, _12692.w);
                    _12544.w = 1.0;
                    mediump vec3 _7620 = dFdx(_6364);
                    mediump vec3 _7622 = dFdy(_6364);
                    mediump float _7636 = clamp(max(_6405.y, pow(clamp(max(dot(_7620, _7620), dot(_7622, _7622)), 0.0, 1.0), 0.333000004291534423828125)), 0.08900000154972076416015625, 1.0);
                    mediump float _7608 = _7636 * _7636;
                    _13437 = _7636;
                    _13421 = _7608 * _7608;
                    _13406 = _12544;
                    _13380 = mix(_12701.xyz * (vec3(1.0) - _12544.xyz), vec3(0.0), vec3(_7562));
                }
                _13436 = _13437;
                _13420 = _13421;
                _13405 = _13406;
                _13379 = _13380;
            }
            uint _7640 = inIndices & 65535u;
            vec3 _6440 = normalize(_s0_b0.uCameras[_7640].viewInv[3].xyz - inPos);
            float _6444 = clamp(dot(_12758, _6440), 9.9999997473787516355514526367188e-05, 1.0);
            float _13450;
            mediump float _13478;
            float _13506;
            if (_4017)
            {
                uint _7740 = floatBitsToUint(_s1_b2.uMaterialData.material[0].factors[11].y);
                vec2 _12965;
                if (((_7740 >> uint(16)) & 32u) == 32u)
                {
                    _12965 = inUv.zw;
                }
                else
                {
                    _12965 = inUv.xy;
                }
                vec2 _13026;
                if (_2293 && (((_7740 & 65535u) & 32u) == 32u))
                {
                    _13026 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[5u].x).xy, _12965), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[5u].y).xy, _12965)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[5u].z).xy;
                }
                else
                {
                    _13026 = _12965;
                }
                mediump vec4 _7693 = texture(s2_b1[4], _13026);
                vec2 _13027;
                if ((_6712 & 64u) == 64u)
                {
                    _13027 = inUv.zw;
                }
                else
                {
                    _13027 = inUv.xy;
                }
                vec2 _13094;
                if (_2345 && ((_6726 & 64u) == 64u))
                {
                    _13094 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[6u].x).xy, _13027), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[6u].y).xy, _13027)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[6u].z).xy;
                }
                else
                {
                    _13094 = _13027;
                }
                mediump float _7662 = clamp(texture(s2_b1[5], _13094).y * _s1_b2.uMaterialData.material[_12688].factors[6].y, 0.08900000154972076416015625, 1.0);
                mediump float _7668 = _7662 * _7662;
                _13506 = _7693.x * _s1_b2.uMaterialData.material[_12688].factors[5].x;
                _13478 = _7662;
                _13450 = _7668 * _7668;
            }
            else
            {
                _13506 = _12827;
                _13478 = _12827;
                _13450 = _12827;
            }
            vec3 _14909 = mix(_13545, _12958, bvec3(_4017));
            mediump float _13562;
            mediump float _13590;
            mediump float _13618;
            mediump vec3 _13646;
            if (_4025)
            {
                bool _7966 = (_6712 & 256u) == 256u;
                vec2 _13095;
                if (_7966)
                {
                    _13095 = inUv.zw;
                }
                else
                {
                    _13095 = inUv.xy;
                }
                bool _7982 = _2345 && ((_6726 & 256u) == 256u);
                vec2 _13171;
                if (_7982)
                {
                    _13171 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[8u].x).xy, _13095), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[8u].y).xy, _13095)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[8u].z).xy;
                }
                else
                {
                    _13171 = _13095;
                }
                mediump vec4 _7948 = texture(s2_b1[7], _13171);
                vec3 _7914 = _7948.xyz * _s1_b2.uMaterialData.material[_12688].factors[8].xyz;
                vec2 _13172;
                if (_7966)
                {
                    _13172 = inUv.zw;
                }
                else
                {
                    _13172 = inUv.xy;
                }
                vec2 _13254;
                if (_7982)
                {
                    _13254 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[8u].x).xy, _13172), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[8u].y).xy, _13172)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[8u].z).xy;
                }
                else
                {
                    _13254 = _13172;
                }
                float _7920 = texture(s2_b1[7], _13254).w * _s1_b2.uMaterialData.material[_12688].factors[8].w;
                float _8169 = 1.0 - _6444;
                _13646 = _7914;
                _13618 = _7920;
                _13590 = max(_7914.x, max(_7914.y, _7914.z));
                _13562 = fma(0.655844628810882568359375, (_8169 * _8169) * _8169, 1.0 / (4.165265560150146484375 + exp(fma(-7.9729137420654296875, _7920 * _7920, 6.3351688385009765625))));
            }
            else
            {
                _13646 = _13545;
                _13618 = _12827;
                _13590 = _12827;
                _13562 = _12827;
            }
            vec3 _13432;
            mediump float _13879;
            if (_4042)
            {
                vec2 _13283;
                if ((_6712 & 512u) == 512u)
                {
                    _13283 = inUv.zw;
                }
                else
                {
                    _13283 = inUv.xy;
                }
                vec2 _13374;
                if (_2345 && ((_6726 & 512u) == 512u))
                {
                    _13374 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[9u].x).xy, _13283), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[9u].y).xy, _13283)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[9u].z).xy;
                }
                else
                {
                    _13374 = _13283;
                }
                mediump vec4 _8196 = texture(s2_b1[8], _13374);
                mediump float _8197 = _8196.x;
                _13879 = _8197 * _s1_b2.uMaterialData.material[_12688].factors[9].x;
                _13432 = _13379 * fma(-_8197, _s1_b2.uMaterialData.material[_12688].factors[9].x, 1.0);
            }
            else
            {
                _13879 = _12827;
                _13432 = _13379;
            }
            vec3 _13927;
            if (_4094)
            {
                vec3 _8395 = _13432 * 0.3183098733425140380859375;
                vec3 _13678;
                _13678 = vec3(0.0);
                vec3 _14306;
                for (uint _13673 = 0u; _13673 < _s0_b4.uLightData.directionalLightCount; _13678 = _14306, _13673++)
                {
                    uint _8410 = _s0_b4.uLightData.directionalLightBeginIndex + _13673;
                    if (!any(notEqual((_s1_b0.uMeshMatrix.mesh[_12688].layers.xy & _s0_b4.uLightData.lights[_8410].indices.wz), uvec2(0u))))
                    {
                        _14306 = _13678;
                        continue;
                    }
                    vec3 _8422 = -_s0_b4.uLightData.lights[_8410].dir.xyz;
                    float _8427 = clamp(dot(_12758, _8422), 0.0, 1.0);
                    mediump float _14166;
                    if (_2966)
                    {
                        mediump float _14167;
                        if ((_s0_b4.uLightData.lights[_8410].flags.x & 8u) == 8u)
                        {
                            vec4 _8446 = _s0_b0.uCameras[_s0_b4.uLightData.lights[_8410].flags.y].shadowViewProj * vec4(inPos, 1.0);
                            mediump float _14168;
                            if (_2997)
                            {
                                vec3 _8730 = _8446.xyz / vec3(_8446.w);
                                float _8734 = float(_s0_b4.uLightData.lights[_8410].flags.z);
                                float _8794 = _8730.z;
                                bool _8795 = _8794 > 0.0;
                                bool _8801;
                                if (_8795)
                                {
                                    _8801 = _8730.x > (_s0_b4.uLightData.lights[_8410].shadowFactors.w * _8734);
                                }
                                else
                                {
                                    _8801 = _8795;
                                }
                                bool _8807;
                                if (_8801)
                                {
                                    _8807 = _8730.x < fma(_s0_b4.uLightData.lights[_8410].shadowFactors.w, _8734, _s0_b4.uLightData.lights[_8410].shadowFactors.w);
                                }
                                else
                                {
                                    _8807 = _8801;
                                }
                                mediump float _14156;
                                if (_8807)
                                {
                                    vec4 _8742 = texture(s0_b8, _8730.xy);
                                    float _8747 = _8742.x;
                                    mediump float _14159;
                                    if (_8794 > _8747)
                                    {
                                        float _8759 = max(fma(-_8747, _8747, _8742.y), 9.9999997473787516355514526367188e-06);
                                        float _8764 = _8794 - _8747;
                                        _14159 = fma(clamp(((_8759 / fma(_8764, _8764, _8759)) - 0.20000000298023223876953125) * 1.25, 0.0, 1.0) - 1.0, _s0_b4.uLightData.lights[_8410].shadowFactors.x, 1.0);
                                    }
                                    else
                                    {
                                        _14159 = 1.0;
                                    }
                                    _14156 = _14159;
                                }
                                else
                                {
                                    _14156 = 1.0;
                                }
                                _14168 = _14156;
                            }
                            else
                            {
                                vec3 _8860 = _8446.xyz / vec3(_8446.w);
                                float _8864 = float(_s0_b4.uLightData.lights[_8410].flags.z);
                                float _9085 = _8860.z;
                                bool _9086 = _9085 > 0.0;
                                bool _9092;
                                if (_9086)
                                {
                                    _9092 = _8860.x > (_s0_b4.uLightData.lights[_8410].shadowFactors.w * _8864);
                                }
                                else
                                {
                                    _9092 = _9086;
                                }
                                bool _9098;
                                if (_9092)
                                {
                                    _9098 = _8860.x < fma(_s0_b4.uLightData.lights[_8410].shadowFactors.w, _8864, _s0_b4.uLightData.lights[_8410].shadowFactors.w);
                                }
                                else
                                {
                                    _9098 = _9092;
                                }
                                mediump float _14153;
                                if (_9098)
                                {
                                    vec2 _8887 = fma(_8860.xy, _s0_b4.uLightData.atlasSizeInvSize.xy, vec2(0.5));
                                    vec2 _8890 = floor(_8887) - vec2(0.5);
                                    float _8895 = fract(_8887.x);
                                    float _8898 = fract(_8887.y);
                                    float _8907 = _9085 - max(_s0_b4.uLightData.lights[_8410].shadowFactors.z * (1.0 - _8427), _s0_b4.uLightData.lights[_8410].shadowFactors.y);
                                    float _8910 = fma(-3.0, _8895, 4.0);
                                    float _8913 = fma(3.0, _8895, 1.0);
                                    float _8919 = (fma(-2.0, _8895, 3.0) / _8910) - 2.0;
                                    float _8922 = (3.0 + _8895) * 0.14285714924335479736328125;
                                    float _8926 = (_8895 / _8913) + 2.0;
                                    float _8929 = fma(-3.0, _8898, 4.0);
                                    float _8932 = fma(3.0, _8898, 1.0);
                                    float _8938 = (fma(-2.0, _8898, 3.0) / _8929) - 2.0;
                                    float _8941 = (3.0 + _8898) * 0.14285714924335479736328125;
                                    float _8945 = (_8898 / _8932) + 2.0;
                                    _14153 = fma(fma(_8913 * _8932, texture(s0_b9, vec3(vec3(_s0_b4.uLightData.atlasSizeInvSize.zw * (_8890 + vec2(_8926, _8945)), _8907).xy, _8907)), fma(7.0 * _8932, texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8922, _8945) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)), fma(_8910 * _8932, texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8919, _8945) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)), fma(_8913 * 7.0, texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8926, _8941) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)), fma(49.0, texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8922, _8941) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)), fma(_8910 * 7.0, texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8919, _8941) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)), fma(_8913 * _8929, texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8926, _8938) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)), fma(_8910 * _8929, texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8919, _8938) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)), (7.0 * _8929) * texture(s0_b9, vec3(vec3(fma(_8890, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_8922, _8938) * _s0_b4.uLightData.atlasSizeInvSize.zw), _8907).xy, _8907)))))))))) * (-0.0069444444961845874786376953125), _s0_b4.uLightData.lights[_8410].shadowFactors.x, 1.0);
                                }
                                else
                                {
                                    _14153 = 1.0;
                                }
                                _14168 = _14153;
                            }
                            _14167 = _14168;
                        }
                        else
                        {
                            _14167 = 1.0;
                        }
                        _14166 = _14167;
                    }
                    else
                    {
                        _14166 = 1.0;
                    }
                    vec3 _9268 = normalize(_8422 + _6440);
                    float _9278 = clamp(dot(_12758, _9268), 0.0, 1.0);
                    float _14160;
                    vec3 _14161;
                    if (_2736)
                    {
                        _14161 = (_13646 * ((((2.0 + (1.0 / _13618)) * pow(fma(-_9278, _9278, 1.0), 0.5 / _13618)) * 0.15915493667125701904296875) * (0.25 / fma(-_8427, _8427, _8427 + _6444)))) * _8427;
                        _14160 = fma(-_13590, _13562, 1.0);
                    }
                    else
                    {
                        _14161 = vec3(0.0);
                        _14160 = 1.0;
                    }
                    float _14162;
                    vec3 _14163;
                    if (_2774)
                    {
                        float _9318 = clamp(dot(_14909, _9268), 9.9999997473787516355514526367188e-05, 1.0);
                        float _9322 = clamp(dot(_8422, _9268), 9.9999997473787516355514526367188e-05, 1.0);
                        float _9439 = fma(fma(_9318, _13450, -_9318), _9318, 1.0);
                        float _9458 = pow(1.0 - clamp(dot(_14909, _6440), 9.9999997473787516355514526367188e-05, 1.0), 5.0);
                        float _9464 = fma(0.039999999105930328369140625, 1.0 - _9458, _9458);
                        _14163 = _14161 + vec3((((_9464 * _13506) * (_13450 / (3.1415927410125732421875 * (_9439 * _9439)))) * min(0.25 / (_9322 * _9322), 64512.0)) * clamp(dot(_14909, _8422), 9.9999997473787516355514526367188e-05, 1.0));
                        _14162 = _14160 * fma(-_9464, _13506, 1.0);
                    }
                    else
                    {
                        _14163 = _14161;
                        _14162 = _14160;
                    }
                    float _9475 = fma(fma(_9278, _13420, -_9278), _9278, 1.0);
                    float _9520 = pow(1.0 - clamp(dot(_6440, _9268), 0.0, 1.0), 5.0);
                    vec3 _9531 = vec3(_13405.w * _9520) + (_13405.xyz * (1.0 - _9520));
                    _14306 = _13678 + (((_14163 + ((fma(vec3(1.0) - _9531, _8395, (_9531 * ((_13420 / (3.1415927410125732421875 * (_9475 * _9475))) * min(1.0 / ((_6444 + sqrt(fma(fma(-_6444, _13420, _6444), _6444, _13420))) * (_8427 + sqrt(fma(fma(-_8427, _13420, _8427), _8427, _13420)))), 64512.0))) * _14162) * _14162) * _8427)) * _s0_b4.uLightData.lights[_8410].color.xyz) * _14166);
                }
                vec3 _13677;
                if (_3049)
                {
                    vec3 _13679;
                    _13679 = _13678;
                    vec3 _14307;
                    for (uint _13674 = 0u; _13674 < _s0_b4.uLightData.spotLightCount; _13679 = _14307, _13674++)
                    {
                        uint _8498 = _s0_b4.uLightData.spotLightBeginIndex + _13674;
                        if (!any(notEqual((_s1_b0.uMeshMatrix.mesh[_12688].layers.xy & _s0_b4.uLightData.lights[_8498].indices.wz), uvec2(0u))))
                        {
                            _14307 = _13679;
                            continue;
                        }
                        vec3 _8512 = _s0_b4.uLightData.lights[_8498].pos.xyz - inPos;
                        float _8514 = length(_8512);
                        vec3 _8518 = _8512 / vec3(_8514);
                        float _8523 = clamp(dot(_12758, _8518), 0.0, 1.0);
                        mediump float _14125;
                        if (_3105)
                        {
                            mediump float _14126;
                            if ((_s0_b4.uLightData.lights[_8498].flags.x & 8u) == 8u)
                            {
                                vec4 _8542 = _s0_b0.uCameras[_s0_b4.uLightData.lights[_8498].flags.y].shadowViewProj * vec4(inPos, 1.0);
                                mediump float _14127;
                                if (_3134)
                                {
                                    vec3 _9565 = _8542.xyz / vec3(_8542.w);
                                    float _9569 = float(_s0_b4.uLightData.lights[_8498].flags.z);
                                    float _9629 = _9565.z;
                                    bool _9630 = _9629 > 0.0;
                                    bool _9636;
                                    if (_9630)
                                    {
                                        _9636 = _9565.x > (_s0_b4.uLightData.lights[_8498].shadowFactors.w * _9569);
                                    }
                                    else
                                    {
                                        _9636 = _9630;
                                    }
                                    bool _9642;
                                    if (_9636)
                                    {
                                        _9642 = _9565.x < fma(_s0_b4.uLightData.lights[_8498].shadowFactors.w, _9569, _s0_b4.uLightData.lights[_8498].shadowFactors.w);
                                    }
                                    else
                                    {
                                        _9642 = _9636;
                                    }
                                    mediump float _14115;
                                    if (_9642)
                                    {
                                        vec4 _9577 = texture(s0_b8, _9565.xy);
                                        float _9582 = _9577.x;
                                        mediump float _14118;
                                        if (_9629 > _9582)
                                        {
                                            float _9594 = max(fma(-_9582, _9582, _9577.y), 9.9999997473787516355514526367188e-06);
                                            float _9599 = _9629 - _9582;
                                            _14118 = fma(clamp(((_9594 / fma(_9599, _9599, _9594)) - 0.20000000298023223876953125) * 1.25, 0.0, 1.0) - 1.0, _s0_b4.uLightData.lights[_8498].shadowFactors.x, 1.0);
                                        }
                                        else
                                        {
                                            _14118 = 1.0;
                                        }
                                        _14115 = _14118;
                                    }
                                    else
                                    {
                                        _14115 = 1.0;
                                    }
                                    _14127 = _14115;
                                }
                                else
                                {
                                    vec3 _9695 = _8542.xyz / vec3(_8542.w);
                                    float _9699 = float(_s0_b4.uLightData.lights[_8498].flags.z);
                                    float _9920 = _9695.z;
                                    bool _9921 = _9920 > 0.0;
                                    bool _9927;
                                    if (_9921)
                                    {
                                        _9927 = _9695.x > (_s0_b4.uLightData.lights[_8498].shadowFactors.w * _9699);
                                    }
                                    else
                                    {
                                        _9927 = _9921;
                                    }
                                    bool _9933;
                                    if (_9927)
                                    {
                                        _9933 = _9695.x < fma(_s0_b4.uLightData.lights[_8498].shadowFactors.w, _9699, _s0_b4.uLightData.lights[_8498].shadowFactors.w);
                                    }
                                    else
                                    {
                                        _9933 = _9927;
                                    }
                                    mediump float _14112;
                                    if (_9933)
                                    {
                                        vec2 _9722 = fma(_9695.xy, _s0_b4.uLightData.atlasSizeInvSize.xy, vec2(0.5));
                                        vec2 _9725 = floor(_9722) - vec2(0.5);
                                        float _9730 = fract(_9722.x);
                                        float _9733 = fract(_9722.y);
                                        float _9742 = _9920 - max(_s0_b4.uLightData.lights[_8498].shadowFactors.z * (1.0 - _8523), _s0_b4.uLightData.lights[_8498].shadowFactors.y);
                                        float _9745 = fma(-3.0, _9730, 4.0);
                                        float _9748 = fma(3.0, _9730, 1.0);
                                        float _9754 = (fma(-2.0, _9730, 3.0) / _9745) - 2.0;
                                        float _9757 = (3.0 + _9730) * 0.14285714924335479736328125;
                                        float _9761 = (_9730 / _9748) + 2.0;
                                        float _9764 = fma(-3.0, _9733, 4.0);
                                        float _9767 = fma(3.0, _9733, 1.0);
                                        float _9773 = (fma(-2.0, _9733, 3.0) / _9764) - 2.0;
                                        float _9776 = (3.0 + _9733) * 0.14285714924335479736328125;
                                        float _9780 = (_9733 / _9767) + 2.0;
                                        _14112 = fma(fma(_9748 * _9767, texture(s0_b9, vec3(vec3(_s0_b4.uLightData.atlasSizeInvSize.zw * (_9725 + vec2(_9761, _9780)), _9742).xy, _9742)), fma(7.0 * _9767, texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9757, _9780) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)), fma(_9745 * _9767, texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9754, _9780) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)), fma(_9748 * 7.0, texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9761, _9776) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)), fma(49.0, texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9757, _9776) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)), fma(_9745 * 7.0, texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9754, _9776) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)), fma(_9748 * _9764, texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9761, _9773) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)), fma(_9745 * _9764, texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9754, _9773) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)), (7.0 * _9764) * texture(s0_b9, vec3(vec3(fma(_9725, _s0_b4.uLightData.atlasSizeInvSize.zw, vec2(_9757, _9773) * _s0_b4.uLightData.atlasSizeInvSize.zw), _9742).xy, _9742)))))))))) * (-0.0069444444961845874786376953125), _s0_b4.uLightData.lights[_8498].shadowFactors.x, 1.0);
                                    }
                                    else
                                    {
                                        _14112 = 1.0;
                                    }
                                    _14127 = _14112;
                                }
                                _14126 = _14127;
                            }
                            else
                            {
                                _14126 = 1.0;
                            }
                            _14125 = _14126;
                        }
                        else
                        {
                            _14125 = 1.0;
                        }
                        float _8583 = clamp(fma(dot(_s0_b4.uLightData.lights[_8498].dir.xyz, -_8518), _s0_b4.uLightData.lights[_8498].spotLightParams.x, _s0_b4.uLightData.lights[_8498].spotLightParams.y), 0.0, 1.0);
                        vec3 _10103 = normalize(_8518 + _6440);
                        float _10113 = clamp(dot(_12758, _10103), 0.0, 1.0);
                        float _14119;
                        vec3 _14120;
                        if (_2736)
                        {
                            _14120 = (_13646 * ((((2.0 + (1.0 / _13618)) * pow(fma(-_10113, _10113, 1.0), 0.5 / _13618)) * 0.15915493667125701904296875) * (0.25 / fma(-_8523, _8523, _8523 + _6444)))) * _8523;
                            _14119 = fma(-_13590, _13562, 1.0);
                        }
                        else
                        {
                            _14120 = vec3(0.0);
                            _14119 = 1.0;
                        }
                        float _14121;
                        vec3 _14122;
                        if (_2774)
                        {
                            float _10153 = clamp(dot(_14909, _10103), 9.9999997473787516355514526367188e-05, 1.0);
                            float _10157 = clamp(dot(_8518, _10103), 9.9999997473787516355514526367188e-05, 1.0);
                            float _10274 = fma(fma(_10153, _13450, -_10153), _10153, 1.0);
                            float _10293 = pow(1.0 - clamp(dot(_14909, _6440), 9.9999997473787516355514526367188e-05, 1.0), 5.0);
                            float _10299 = fma(0.039999999105930328369140625, 1.0 - _10293, _10293);
                            _14122 = _14120 + vec3((((_10299 * _13506) * (_13450 / (3.1415927410125732421875 * (_10274 * _10274)))) * min(0.25 / (_10157 * _10157), 64512.0)) * clamp(dot(_14909, _8518), 9.9999997473787516355514526367188e-05, 1.0));
                            _14121 = _14119 * fma(-_10299, _13506, 1.0);
                        }
                        else
                        {
                            _14122 = _14120;
                            _14121 = _14119;
                        }
                        float _10310 = fma(fma(_10113, _13420, -_10113), _10113, 1.0);
                        float _10355 = pow(1.0 - clamp(dot(_6440, _10103), 0.0, 1.0), 5.0);
                        vec3 _10366 = vec3(_13405.w * _10355) + (_13405.xyz * (1.0 - _10355));
                        _14307 = _13679 + ((((_14122 + ((fma(vec3(1.0) - _10366, _8395, (_10366 * ((_13420 / (3.1415927410125732421875 * (_10310 * _10310))) * min(1.0 / ((_6444 + sqrt(fma(fma(-_6444, _13420, _6444), _6444, _13420))) * (_8523 + sqrt(fma(fma(-_8523, _13420, _8523), _8523, _13420)))), 64512.0))) * _14121) * _14121) * _8523)) * _s0_b4.uLightData.lights[_8498].color.xyz) * ((_8583 * _8583) * (max(min(1.0 - pow(_8514 / _s0_b4.uLightData.lights[_8498].dir.w, 4.0), 1.0), 0.0) / (_8514 * _8514)))) * _14125);
                    }
                    _13677 = _13679;
                }
                else
                {
                    _13677 = _13678;
                }
                vec3 _13676;
                if (_3229)
                {
                    vec3 _13680;
                    _13680 = _13677;
                    vec3 _14308;
                    for (uint _13675 = 0u; _13675 < _s0_b4.uLightData.pointLightCount; _13680 = _14308, _13675++)
                    {
                        uint _8634 = _s0_b4.uLightData.pointLightBeginIndex + _13675;
                        if (!any(notEqual((_s1_b0.uMeshMatrix.mesh[_12688].layers.xy & _s0_b4.uLightData.lights[_8634].indices.wz), uvec2(0u))))
                        {
                            _14308 = _13680;
                            continue;
                        }
                        vec3 _8648 = _s0_b4.uLightData.lights[_8634].pos.xyz - inPos;
                        float _8650 = length(_8648);
                        vec3 _8654 = _8648 / vec3(_8650);
                        float _8659 = clamp(dot(_12758, _8654), 0.0, 1.0);
                        vec3 _10422 = normalize(_8654 + _6440);
                        float _10432 = clamp(dot(_12758, _10422), 0.0, 1.0);
                        float _14103;
                        vec3 _14104;
                        if (_2736)
                        {
                            _14104 = (_13646 * ((((2.0 + (1.0 / _13618)) * pow(fma(-_10432, _10432, 1.0), 0.5 / _13618)) * 0.15915493667125701904296875) * (0.25 / fma(-_8659, _8659, _8659 + _6444)))) * _8659;
                            _14103 = fma(-_13590, _13562, 1.0);
                        }
                        else
                        {
                            _14104 = vec3(0.0);
                            _14103 = 1.0;
                        }
                        float _14105;
                        vec3 _14106;
                        if (_2774)
                        {
                            float _10472 = clamp(dot(_14909, _10422), 9.9999997473787516355514526367188e-05, 1.0);
                            float _10476 = clamp(dot(_8654, _10422), 9.9999997473787516355514526367188e-05, 1.0);
                            float _10593 = fma(fma(_10472, _13450, -_10472), _10472, 1.0);
                            float _10612 = pow(1.0 - clamp(dot(_14909, _6440), 9.9999997473787516355514526367188e-05, 1.0), 5.0);
                            float _10618 = fma(0.039999999105930328369140625, 1.0 - _10612, _10612);
                            _14106 = _14104 + vec3((((_10618 * _13506) * (_13450 / (3.1415927410125732421875 * (_10593 * _10593)))) * min(0.25 / (_10476 * _10476), 64512.0)) * clamp(dot(_14909, _8654), 9.9999997473787516355514526367188e-05, 1.0));
                            _14105 = _14103 * fma(-_10618, _13506, 1.0);
                        }
                        else
                        {
                            _14106 = _14104;
                            _14105 = _14103;
                        }
                        float _10629 = fma(fma(_10432, _13420, -_10432), _10432, 1.0);
                        float _10674 = pow(1.0 - clamp(dot(_6440, _10422), 0.0, 1.0), 5.0);
                        vec3 _10685 = vec3(_13405.w * _10674) + (_13405.xyz * (1.0 - _10674));
                        _14308 = _13680 + (((_14106 + ((fma(vec3(1.0) - _10685, _8395, (_10685 * ((_13420 / (3.1415927410125732421875 * (_10629 * _10629))) * min(1.0 / ((_6444 + sqrt(fma(fma(-_6444, _13420, _6444), _6444, _13420))) * (_8659 + sqrt(fma(fma(-_8659, _13420, _8659), _8659, _13420)))), 64512.0))) * _14105) * _14105) * _8659)) * _s0_b4.uLightData.lights[_8634].color.xyz) * (max(min(1.0 - pow(_8650 / _s0_b4.uLightData.lights[_8634].dir.w, 4.0), 1.0), 0.0) / (_8650 * _8650)));
                    }
                    _13676 = _13680;
                }
                else
                {
                    _13676 = _13677;
                }
                _13927 = _13676;
            }
            else
            {
                _13927 = vec3(0.0);
            }
            vec3 _14075;
            if (_4106)
            {
                vec2 _13681;
                if ((_6712 & 16u) == 16u)
                {
                    _13681 = inUv.zw;
                }
                else
                {
                    _13681 = inUv.xy;
                }
                vec2 _13799;
                if (_2345 && ((_6726 & 16u) == 16u))
                {
                    _13799 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[4u].x).xy, _13681), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[4u].y).xy, _13681)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[4u].z).xy;
                }
                else
                {
                    _13799 = _13681;
                }
                mediump vec4 _10698 = texture(s2_b1[3], _13799);
                float _6514 = clamp(_10698.x * _s1_b2.uMaterialData.material[_12688].factors[4].x, 0.0, 1.0);
                mat3 _10817 = mat3(_s0_b2.uEnvironmentData.envRotation[0].xyz, _s0_b2.uEnvironmentData.envRotation[1].xyz, _s0_b2.uEnvironmentData.envRotation[2].xyz);
                vec3 _10818 = _10817 * _12758;
                float _10854 = _10818.y;
                float _10861 = _10818.z;
                float _10868 = _10818.x;
                vec3 _6522 = ((max(vec3(0.0), (((((((_s0_b2.uEnvironmentData.shIndirectCoefficients[0].xyz + (_s0_b2.uEnvironmentData.shIndirectCoefficients[1].xyz * _10854)) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[2].xyz * _10861)) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[3].xyz * _10868)) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[4].xyz * (_10868 * _10854))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[5].xyz * (_10861 * _10854))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[6].xyz * fma(3.0 * _10861, _10861, -1.0))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[7].xyz * (_10868 * _10861))) + (_s0_b2.uEnvironmentData.shIndirectCoefficients[8].xyz * fma(_10868, _10868, -(_10854 * _10854)))) * _s0_b2.uEnvironmentData.indirectDiffuseColorFactor.xyz) * _13432) * _6514;
                vec3 _6525 = -_6440;
                vec3 _6528 = reflect(_6525, _12758);
                vec4 _10938 = (vec4(-1.0, -0.0274999998509883880615234375, -0.572000026702880859375, 0.02199999988079071044921875) * _13436) + vec4(1.0, 0.0425000004470348358154296875, 1.03999996185302734375, -0.039999999105930328369140625);
                float _10940 = _10938.x;
                vec2 _10958 = (vec2(-1.03999996185302734375, 1.03999996185302734375) * fma(min(_10940 * _10940, exp2((-9.27999973297119140625) * _6444)), _10940, _10938.y)) + _10938.zw;
                float _11008 = _s0_b2.uEnvironmentData.values.x * _13436;
                vec4 _10998 = textureLod(s0_b10, _10817 * _6528, _11008);
                vec3 _11003 = (_10998.xyz * (1.0 / _10998.w)) * _s0_b2.uEnvironmentData.indirectSpecularColorFactor.xyz;
                mediump vec3 _6541 = _11003 * ((_13405.xyz * _10958.x) + vec3(_10958.y * clamp(50.0 * max(_13405.x, max(_13405.y, _13405.z)), 0.0, 1.0)));
                mediump vec3 _13868;
                mediump vec3 _13869;
                if (_4154)
                {
                    mediump float _11030 = fma(-_13590, _13562, 1.0);
                    _13869 = fma(_13646 * _13562, _11003, _6541 * _11030);
                    _13868 = _6522 * _11030;
                }
                else
                {
                    _13869 = _6541;
                    _13868 = _6522;
                }
                mediump vec3 _13916;
                mediump vec3 _13918;
                if (_4172)
                {
                    vec4 _11061 = textureLod(s0_b10, _10817 * reflect(_6525, _14909), _s0_b2.uEnvironmentData.values.x * _13478);
                    mediump vec3 _11122 = dFdx(_14909);
                    mediump vec3 _11124 = dFdy(_14909);
                    vec2 _11144 = (vec2(-1.0, -0.0274999998509883880615234375) * clamp(max(_13450, pow(clamp(max(dot(_11122, _11122), dot(_11124, _11124)), 0.0, 1.0), 0.333000004291534423828125)), 0.08900000154972076416015625, 1.0)) + vec2(1.0, 0.0425000004470348358154296875);
                    float _11146 = _11144.x;
                    float _11159 = fma(min(_11146 * _11146, exp2((-9.27999973297119140625) * clamp(dot(_14909, _6440), 9.9999997473787516355514526367188e-05, 1.0))), _11146, _11144.y);
                    float _11105 = 1.0 - _11159;
                    _13918 = (_13869 * _11105) + (((_11061.xyz * (1.0 / _11061.w)) * _s0_b2.uEnvironmentData.indirectSpecularColorFactor.xyz) * _11159);
                    _13916 = _13868 * _11105;
                }
                else
                {
                    _13918 = _13869;
                    _13916 = _13868;
                }
                mediump vec3 _13921;
                if (_4206)
                {
                    vec2 _11165 = gl_FragCoord.xy * _s0_b1.uGeneralData.viewportSizeInvViewportSize.zw;
                    vec2 _13870;
                    if (CORE_FLIP_NDC < 0.0)
                    {
                        _13870 = vec2(_11165.x, 1.0 - _11165.y);
                    }
                    else
                    {
                        _13870 = _11165;
                    }
                    mediump vec4 _11183 = textureLod(s0_b7, _13870, _11008);
                    vec4 _13871;
                    if (_11183.w < 0.5)
                    {
                        vec4 _11218 = textureLod(s0_b10, _10817 * _6525, _11008);
                        vec3 _11223 = (_11218.xyz * (1.0 / _11218.w)) * _s0_b2.uEnvironmentData.indirectSpecularColorFactor.xyz;
                        _13871 = vec4(_11223.x, _11223.y, _11223.z, _11183.w);
                    }
                    else
                    {
                        _13871 = _11183;
                    }
                    _13921 = mix(_13916 * (1.0 - _13879), _13871.xyz * _12701.xyz, vec3(_13879));
                }
                else
                {
                    _13921 = _13916;
                }
                float _11258 = min(1.0 + dot(_6528, _6364), 1.0);
                _14075 = _13927 + (_13921 + (_13918 * (_6514 * (_11258 * _11258))));
            }
            else
            {
                _14075 = _13927;
            }
            vec2 _13930;
            if ((_6712 & 8u) == 8u)
            {
                _13930 = inUv.zw;
            }
            else
            {
                _13930 = inUv.xy;
            }
            vec2 _14072;
            if (_2345 && ((_6726 & 8u) == 8u))
            {
                _14072 = vec2(dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[3u].x).xy, _13930), dot(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[3u].y).xy, _13930)) + unpackHalf2x16(_s1_b3.uMaterialTransformData.material[_12688]._packed[3u].z).xy;
            }
            else
            {
                _14072 = _13930;
            }
            mediump vec4 _11274 = texture(s2_b1[2], _14072);
            vec3 _11415 = vec4(fma(_11274.xyz, _s1_b2.uMaterialData.material[_12688].factors[3].xyz * _s1_b2.uMaterialData.material[_12688].factors[3].w, _14075), _12701.w).xyz;
            vec3 _14080;
            if ((CORE_CAMERA_FLAGS & 1u) == 1u)
            {
                vec3 _11422 = inPos - _s0_b0.uCameras[_7640].viewInv[3].xyz;
                float _11424 = _11422.y;
                float _11429 = dot(_11422, _11422);
                float _11431 = inversesqrt(_11429);
                float _11434 = _11429 * _11431;
                float _14076;
                float _14077;
                float _14078;
                if (_s0_b3.uFogData.baseFactors.x > 0.0)
                {
                    float _11442 = _s0_b3.uFogData.baseFactors.x * _11431;
                    _14078 = fma(-_s0_b3.uFogData.baseFactors.x, _11431, 1.0) * _11434;
                    _14077 = fma(_11442, _11424, _s0_b0.uCameras[_7640].viewInv[3].y);
                    _14076 = fma(-_11442, _11424, _11424);
                }
                else
                {
                    _14078 = _11434;
                    _14077 = _s0_b0.uCameras[_7640].viewInv[3].y;
                    _14076 = _11424;
                }
                float _11544 = max(-127.0, _s0_b3.uFogData.firstLayer.y * _14076);
                float _11585 = max(-127.0, _s0_b3.uFogData.secondLayer.y * _14076);
                _14080 = mix(_11415, (_s0_b3.uFogData.inscatteringColor.xyz * _s0_b3.uFogData.inscatteringColor.w) + (_s0_b3.uFogData.envMapFactor.xyz * _s0_b3.uFogData.envMapFactor.w), vec3(((_s0_b3.uFogData.baseFactors.y > 0.0) && (_14078 > _s0_b3.uFogData.baseFactors.y)) ? 0.0 : min(1.0 - clamp(exp2(-(fma(_s0_b3.uFogData.firstLayer.x * exp2(-max(-127.0, _s0_b3.uFogData.firstLayer.y * (_14077 - _s0_b3.uFogData.firstLayer.z))), (abs(_11544) > 0.004999999888241291046142578125) ? ((1.0 - exp2(-_11544)) / _11544) : fma(-0.2402265071868896484375, _11544, 0.693147182464599609375), (_s0_b3.uFogData.secondLayer.x * exp2(-max(-127.0, _s0_b3.uFogData.secondLayer.y * (_14077 - _s0_b3.uFogData.secondLayer.z)))) * ((abs(_11585) > 0.004999999888241291046142578125) ? ((1.0 - exp2(-_11585)) / _11585) : fma(-0.2402265071868896484375, _11585, 0.693147182464599609375))) * _14078)), 0.0, 1.0), _s0_b3.uFogData.baseFactors.z)));
            }
            else
            {
                _14080 = _11415;
            }
            vec4 _11622 = _s0_b0.uCameras[_7640].viewProj * vec4(inPos, 1.0);
            vec4 _11631 = _s0_b0.uCameras[_7640].viewProjPrevFrame * vec4(inPrevPosI.xyz, 1.0);
            vec3 _11687 = _12758 / vec3((abs(_12758.x) + abs(_12758.y)) + abs(_12758.z));
            vec2 _14100;
            if (_11687.z >= 0.0)
            {
                _14100 = _11687.xy;
            }
            else
            {
                _14100 = (vec2(1.0) - abs(_11687.yx)) * vec2((_11687.x >= 0.0) ? 1.0 : (-1.0), (_11687.y >= 0.0) ? 1.0 : (-1.0));
            }
            outVelocityNormal = vec4(((((_11622.xy / vec2(_11622.w)) * 0.5) + vec2(0.5)) - (((_11631.xy / vec2(_11631.w)) * 0.5) + vec2(0.5))) * _s0_b1.uGeneralData.viewportSizeInvViewportSize.xy, (_14100.xy * 0.5) + vec2(0.5));
            outColor = vec4(clamp(_14080, vec3(0.0), vec3(64512.0)) * _12701.w, _12701.w);
        }
    }
    if (_4314)
    {
        vec2 _11746 = gl_FragCoord.xy * _s0_b1.uGeneralData.viewportSizeInvViewportSize.zw;
        vec2 _14289;
        if (CORE_FLIP_NDC < 0.0)
        {
            _14289 = vec2(_11746.x, 1.0 - _11746.y);
        }
        else
        {
            _14289 = _11746;
        }
        vec3 _14290;
        if ((_s0_b5.uPostProcessData.flags.x & 1u) == 1u)
        {
            vec3 _11841 = outColor.xyz * _s0_b5.uPostProcessData.factors[0].x;
            uint _11844 = uint(_s0_b5.uPostProcessData.factors[0].w);
            vec3 _14291;
            if (_11844 == 0u)
            {
                _14291 = (_11841 * ((_11841 * 2.5099999904632568359375) + vec3(0.02999999932944774627685546875))) / fma(_11841, (_11841 * 2.4300000667572021484375) + vec3(0.589999973773956298828125), vec3(0.14000000059604644775390625));
            }
            else
            {
                vec3 _14292;
                if (_11844 == 1u)
                {
                    _14292 = (_11841 * ((_11841 * 15.80000019073486328125) + vec3(2.11999988555908203125))) / fma(_11841, (_11841 * 1.2000000476837158203125) + vec3(5.9200000762939453125), vec3(1.89999997615814208984375));
                }
                else
                {
                    vec3 _14293;
                    if (_11844 == 2u)
                    {
                        vec3 _11861 = _11841 * 6.0;
                        vec3 _11918 = _11861 * 0.1500000059604644775390625;
                        _14293 = ((fma(_11861, _11918 + vec3(0.0500000007450580596923828125), vec3(0.0040000001899898052215576171875)) / fma(_11861, _11918 + vec3(0.5), vec3(0.0599999986588954925537109375))) - vec3(0.066666670143604278564453125)) * vec3(1.3790643215179443359375);
                    }
                    else
                    {
                        _14293 = outColor.xyz;
                    }
                    _14292 = _14293;
                }
                _14291 = _14292;
            }
            _14290 = _14291;
        }
        else
        {
            _14290 = outColor.xyz;
        }
        vec2 _11792 = _14289 * _s0_b5.uPostProcessData.renderTimings.y;
        vec3 _14298;
        if ((_s0_b5.uPostProcessData.flags.x & 4u) == 4u)
        {
            _14298 = _14290.xyz + vec3(fract(sin(dot(vec2(_11792.x * _s0_b5.uPostProcessData.factors[2].y, _11792.y * _s0_b5.uPostProcessData.factors[2].z), vec2(12.98980045318603515625, 78.233001708984375))) * 43758.546875) * _s0_b5.uPostProcessData.factors[2].x);
        }
        else
        {
            _14298 = _14290.xyz;
        }
        vec3 _14300;
        if ((_s0_b5.uPostProcessData.flags.x & 2u) == 2u)
        {
            vec2 _11999 = _14289 * (vec2(1.0) - _14289.yx);
            _14300 = _14298.xyz * clamp(pow(((_11999.x * _11999.y) * _s0_b5.uPostProcessData.factors[1].x) * 40.0, _s0_b5.uPostProcessData.factors[1].y), 0.0, 1.0);
        }
        else
        {
            _14300 = _14298.xyz;
        }
        vec3 _14302;
        if ((_s0_b5.uPostProcessData.flags.x & 8u) == 8u)
        {
            vec3 _14303;
            if (uint(_s0_b5.uPostProcessData.factors[3].w) == 1u)
            {
                _14303 = mix((pow(_14300.xyz, vec3(0.41600000858306884765625)) * 1.05499994754791259765625) - vec3(0.054999999701976776123046875), _14300.xyz * 12.9200000762939453125, lessThan(_14300.xyz, vec3(0.003130800090730190277099609375)));
            }
            else
            {
                _14303 = _14300.xyz;
            }
            _14302 = _14303;
        }
        else
        {
            _14302 = _14300.xyz;
        }
        outColor = vec4(_14302.x, _14302.y, _14302.z, outColor.w);
    }
}

