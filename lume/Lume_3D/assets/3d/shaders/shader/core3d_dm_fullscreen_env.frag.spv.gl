#version 450

uniform float CORE_FLIP_NDC ;

struct DefaultMaterialFogStruct
{
    uvec4 indices;
    vec4 firstLayer;
    vec4 secondLayer;
    vec4 baseFactors;
    vec4 inscatteringColor;
    vec4 envMapFactor;
    vec4 additionalFactor;
};

struct DefaultMaterialEnvironmentStruct
{
    vec4 indirectSpecularColorFactor;
    vec4 indirectDiffuseColorFactor;
    vec4 envMapColorFactor;
    vec4 values;
    vec4 blendFactor;
    mat4 envRotation;
    uvec4 indices;
    vec4 shIndirectCoefficients[9];
    vec4 pad0;
};

struct DefaultCameraMatrixStruct
{
    mat4 view;
    mat4 proj;
    mat4 viewProj;
    mat4 viewInv;
    mat4 projInv;
    mat4 viewProjInv;
    mat4 viewPrevFrame;
    mat4 projPrevFrame;
    mat4 viewProjPrevFrame;
    mat4 shadowViewProj;
    mat4 shadowViewProjInv;
    vec4 jitter;
    vec4 jitterPrevFrame;
    uvec4 indices;
    uvec4 multiViewIndices;
    vec4 frustumPlanes[6];
    uvec4 counts;
    uvec4 pad0;
    mat4 matPad0;
    mat4 matPad1;
};

#ifndef SPIRV_CROSS_CONSTANT_ID_4
#define SPIRV_CROSS_CONSTANT_ID_4 0u
#endif
const uint CORE_CAMERA_FLAGS = SPIRV_CROSS_CONSTANT_ID_4;

struct GlobalPostProcessStruct
{
    uvec4 flags;
    vec4 renderTimings;
    vec4 factors[14];
    vec4 userFactors[16];
};

#ifndef SPIRV_CROSS_CONSTANT_ID_0
#define SPIRV_CROSS_CONSTANT_ID_0 0u
#endif
const uint CORE_DEFAULT_ENV_TYPE = SPIRV_CROSS_CONSTANT_ID_0;
#ifndef SPIRV_CROSS_CONSTANT_ID_3
#define SPIRV_CROSS_CONSTANT_ID_3 0u
#endif
const uint CORE_POST_PROCESS_FLAGS = SPIRV_CROSS_CONSTANT_ID_3;
const bool _948 = (CORE_POST_PROCESS_FLAGS > 0u);

struct DefaultMaterialGeneralDataStruct
{
    uvec4 indices;
    vec4 viewportSizeInvViewportSize;
    vec4 sceneTimingData;
};

layout(std140) uniform s0_b3
{
    DefaultMaterialFogStruct uFogData;
} _s0_b3;

layout(std140) uniform s0_b2
{
    DefaultMaterialEnvironmentStruct uEnvironmentData;
} _s0_b2;

layout(std140) uniform s0_b0
{
    DefaultCameraMatrixStruct uCameras[16];
} _s0_b0;

layout(std140) uniform s0_b4
{
    GlobalPostProcessStruct uPostProcessData;
} _s0_b4;

layout(std140) uniform s0_b1
{
    DefaultMaterialGeneralDataStruct uGeneralData;
} _s0_b1;

uniform samplerCube s1_b1;
uniform sampler2D s1_b0;

layout(location = 0) out vec4 outColor;
layout(location = 1) flat in uint inIndices;
layout(location = 0) in vec2 inUv;
layout(location = 1) out vec4 outVelocityNormal;

void main()
{
    outColor = vec4(0.0, 0.0, 0.0, 1.0);
    uint _982 = inIndices & 65535u;
    mat4 _1748 = _s0_b0.uCameras[_982].viewInv;
    _1748[3] = vec4(0.0, 0.0, 0.0, 1.0);
    mat4 _1009 = _1748 * _s0_b0.uCameras[_982].projInv;
    vec4 _1016 = _1009 * vec4(inUv, 1.0, 1.0);
    vec3 _1022 = _1016.xyz / vec3(_1016.w);
    bool _1026 = CORE_DEFAULT_ENV_TYPE == 2u;
    vec4 _1783;
    if (_1026 || (CORE_DEFAULT_ENV_TYPE == 3u))
    {
        vec4 _1037 = _1009 * vec4(inUv, 0.0, 1.0);
        vec3 _1061 = mat3(_s0_b2.uEnvironmentData.envRotation[0].xyz, _s0_b2.uEnvironmentData.envRotation[1].xyz, _s0_b2.uEnvironmentData.envRotation[2].xyz) * normalize(_1022.xyz - (_1037.xyz / vec3(_1037.w)).xyz);
        vec4 _1784;
        if (_1026)
        {
            vec4 _1068 = textureLod(s1_b1, _1061, _s0_b2.uEnvironmentData.values.y);
            vec3 _1132 = _1068.xyz * (1.0 / _1068.w);
            _1784 = vec4(_1132.x, _1132.y, _1132.z, vec4(0.0, 0.0, 0.0, 1.0).w);
        }
        else
        {
            _1784 = textureLod(s1_b0, vec2(atan(_1061.z, _1061.x) + 3.1415927410125732421875, acos(_1061.y)) * vec2(0.15915493667125701904296875, 0.3183098733425140380859375), _s0_b2.uEnvironmentData.values.y);
        }
        _1783 = _1784;
    }
    else
    {
        vec4 _1785;
        if (CORE_DEFAULT_ENV_TYPE == 1u)
        {
            _1785 = textureLod(s1_b0, (inUv + vec2(1.0)) * 0.5, _s0_b2.uEnvironmentData.values.y);
        }
        else
        {
            _1785 = vec4(0.0, 0.0, 0.0, 1.0);
        }
        _1783 = _1785;
    }
    vec3 _1162 = (_1783.xyz * _s0_b2.uEnvironmentData.envMapColorFactor.xyz).xyz;
    vec3 _1790;
    if ((CORE_CAMERA_FLAGS & 1u) == 1u)
    {
        vec3 _1169 = _1022.xyz - _s0_b0.uCameras[_982].viewInv[3].xyz;
        float _1171 = _1169.y;
        float _1176 = dot(_1169, _1169);
        float _1178 = inversesqrt(_1176);
        float _1181 = _1176 * _1178;
        float _1786;
        float _1787;
        float _1788;
        if (_s0_b3.uFogData.baseFactors.x > 0.0)
        {
            float _1189 = _s0_b3.uFogData.baseFactors.x * _1178;
            _1788 = fma(-_s0_b3.uFogData.baseFactors.x, _1178, 1.0) * _1181;
            _1787 = fma(_1189, _1171, _s0_b0.uCameras[_982].viewInv[3].y);
            _1786 = fma(-_1189, _1171, _1171);
        }
        else
        {
            _1788 = _1181;
            _1787 = _s0_b0.uCameras[_982].viewInv[3].y;
            _1786 = _1171;
        }
        float _1291 = max(-127.0, _s0_b3.uFogData.firstLayer.y * _1786);
        float _1332 = max(-127.0, _s0_b3.uFogData.secondLayer.y * _1786);
        _1790 = mix(_1162, (_s0_b3.uFogData.inscatteringColor.xyz * _s0_b3.uFogData.inscatteringColor.w) + (_s0_b3.uFogData.envMapFactor.xyz * _s0_b3.uFogData.envMapFactor.w), vec3(((_s0_b3.uFogData.baseFactors.y > 0.0) && (_1788 > _s0_b3.uFogData.baseFactors.y)) ? 0.0 : min(1.0 - clamp(exp2(-(fma(_s0_b3.uFogData.firstLayer.x * exp2(-max(-127.0, _s0_b3.uFogData.firstLayer.y * (_1787 - _s0_b3.uFogData.firstLayer.z))), (abs(_1291) > 0.004999999888241291046142578125) ? ((1.0 - exp2(-_1291)) / _1291) : fma(-0.2402265071868896484375, _1291, 0.693147182464599609375), (_s0_b3.uFogData.secondLayer.x * exp2(-max(-127.0, _s0_b3.uFogData.secondLayer.y * (_1787 - _s0_b3.uFogData.secondLayer.z)))) * ((abs(_1332) > 0.004999999888241291046142578125) ? ((1.0 - exp2(-_1332)) / _1332) : fma(-0.2402265071868896484375, _1332, 0.693147182464599609375))) * _1788)), 0.0, 1.0), _s0_b3.uFogData.baseFactors.z)));
    }
    else
    {
        _1790 = _1162;
    }
    outColor = vec4(_1790.x, _1790.y, _1790.z, _1783.w);
    if (_948)
    {
        vec2 _1360 = gl_FragCoord.xy * _s0_b1.uGeneralData.viewportSizeInvViewportSize.zw;
        vec2 _1794;
        if (CORE_FLIP_NDC < 0.0)
        {
            _1794 = vec2(_1360.x, 1.0 - _1360.y);
        }
        else
        {
            _1794 = _1360;
        }
        vec3 _1795;
        if ((_s0_b4.uPostProcessData.flags.x & 1u) == 1u)
        {
            vec3 _1455 = outColor.xyz * _s0_b4.uPostProcessData.factors[0].x;
            uint _1458 = uint(_s0_b4.uPostProcessData.factors[0].w);
            vec3 _1796;
            if (_1458 == 0u)
            {
                _1796 = (_1455 * ((_1455 * 2.5099999904632568359375) + vec3(0.02999999932944774627685546875))) / fma(_1455, (_1455 * 2.4300000667572021484375) + vec3(0.589999973773956298828125), vec3(0.14000000059604644775390625));
            }
            else
            {
                vec3 _1797;
                if (_1458 == 1u)
                {
                    _1797 = (_1455 * ((_1455 * 15.80000019073486328125) + vec3(2.11999988555908203125))) / fma(_1455, (_1455 * 1.2000000476837158203125) + vec3(5.9200000762939453125), vec3(1.89999997615814208984375));
                }
                else
                {
                    vec3 _1798;
                    if (_1458 == 2u)
                    {
                        vec3 _1475 = _1455 * 6.0;
                        vec3 _1532 = _1475 * 0.1500000059604644775390625;
                        _1798 = ((fma(_1475, _1532 + vec3(0.0500000007450580596923828125), vec3(0.0040000001899898052215576171875)) / fma(_1475, _1532 + vec3(0.5), vec3(0.0599999986588954925537109375))) - vec3(0.066666670143604278564453125)) * vec3(1.3790643215179443359375);
                    }
                    else
                    {
                        _1798 = outColor.xyz;
                    }
                    _1797 = _1798;
                }
                _1796 = _1797;
            }
            _1795 = _1796;
        }
        else
        {
            _1795 = outColor.xyz;
        }
        vec2 _1406 = _1794 * _s0_b4.uPostProcessData.renderTimings.y;
        vec3 _1803;
        if ((_s0_b4.uPostProcessData.flags.x & 4u) == 4u)
        {
            _1803 = _1795.xyz + vec3(fract(sin(dot(vec2(_1406.x * _s0_b4.uPostProcessData.factors[2].y, _1406.y * _s0_b4.uPostProcessData.factors[2].z), vec2(12.98980045318603515625, 78.233001708984375))) * 43758.546875) * _s0_b4.uPostProcessData.factors[2].x);
        }
        else
        {
            _1803 = _1795.xyz;
        }
        vec3 _1805;
        if ((_s0_b4.uPostProcessData.flags.x & 2u) == 2u)
        {
            vec2 _1613 = _1794 * (vec2(1.0) - _1794.yx);
            _1805 = _1803.xyz * clamp(pow(((_1613.x * _1613.y) * _s0_b4.uPostProcessData.factors[1].x) * 40.0, _s0_b4.uPostProcessData.factors[1].y), 0.0, 1.0);
        }
        else
        {
            _1805 = _1803.xyz;
        }
        vec3 _1807;
        if ((_s0_b4.uPostProcessData.flags.x & 8u) == 8u)
        {
            vec3 _1808;
            if (uint(_s0_b4.uPostProcessData.factors[3].w) == 1u)
            {
                _1808 = mix((pow(_1805.xyz, vec3(0.41600000858306884765625)) * 1.05499994754791259765625) - vec3(0.054999999701976776123046875), _1805.xyz * 12.9200000762939453125, lessThan(_1805.xyz, vec3(0.003130800090730190277099609375)));
            }
            else
            {
                _1808 = _1805.xyz;
            }
            _1807 = _1808;
        }
        else
        {
            _1807 = _1805.xyz;
        }
        outColor = vec4(_1807.x, _1807.y, _1807.z, outColor.w);
    }
    outVelocityNormal = vec4(0.0, 0.0, 0.5, 0.5);
}

