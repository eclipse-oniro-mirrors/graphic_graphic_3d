#version 320 es
#ifdef GL_ARB_shader_draw_parameters
#extension GL_ARB_shader_draw_parameters : enable
#endif
#define SPIRV_CROSS_CONSTANT_ID_256 1u

#ifndef SPIRV_CROSS_CONSTANT_ID_0
#define SPIRV_CROSS_CONSTANT_ID_0 0u
#endif
const uint CORE_SUBMESH_FLAGS = SPIRV_CROSS_CONSTANT_ID_0;
const uint _27 = (CORE_SUBMESH_FLAGS & 4u);
const bool _29 = (_27 == 4u);

struct DefaultMaterialSkinStruct
{
    mat4 jointMatrices[256];
};

struct DefaultMaterialSingleMeshStruct
{
    mat4 world;
    mat4 normalWorld;
    mat4 prevWorld;
    uvec4 indices;
    uvec4 layers;
    uvec4 customData[2];
};

struct DefaultMaterialMeshStruct
{
    DefaultMaterialSingleMeshStruct mesh[64];
};

struct DefaultMaterialGeneralDataStruct
{
    uvec4 indices;
    vec4 viewportSizeInvViewportSize;
    vec4 sceneTimingData;
};

struct DefaultCameraMatrixStruct
{
    mat4 view;
    mat4 proj;
    mat4 viewProj;
    mat4 viewInv;
    mat4 projInv;
    mat4 viewProjInv;
    mat4 viewPrevFrame;
    mat4 projPrevFrame;
    mat4 viewProjPrevFrame;
    mat4 shadowViewProj;
    mat4 shadowViewProjInv;
    vec4 jitter;
    vec4 jitterPrevFrame;
    uvec4 indices;
    uvec4 multiViewIndices;
    vec4 frustumPlanes[6];
    uvec4 counts;
    uvec4 pad0;
    mat4 matPad0;
    mat4 matPad1;
};

#ifndef SPIRV_CROSS_CONSTANT_ID_256
#define SPIRV_CROSS_CONSTANT_ID_256 0u
#endif
const uint CORE_BACKEND_TYPE = SPIRV_CROSS_CONSTANT_ID_256;
const bool _198 = (CORE_BACKEND_TYPE != 0u);
uniform float CORE_FLIP_NDC ;

layout(std140) uniform s1_b1
{
    DefaultMaterialSkinStruct uSkinData;
} _s1_b1;

layout(std140) uniform s1_b0
{
    DefaultMaterialMeshStruct uMeshMatrix;
} _s1_b0;

layout(std140) uniform s0_b1
{
    DefaultMaterialGeneralDataStruct uGeneralData;
} _s0_b1;

layout(std140) uniform s0_b0
{
    DefaultCameraMatrixStruct uCameras[16];
} _s0_b0;

layout(location = 1) in uvec4 inIndex;
layout(location = 2) in mediump vec4 inWeight;
#ifdef GL_ARB_shader_draw_parameters
#define SPIRV_Cross_BaseInstance gl_BaseInstanceARB
#else
uniform int SPIRV_Cross_BaseInstance;
#endif
layout(location = 0) in vec3 inPosition;

void main()
{
    mat4 _326;
    do
    {
        if (_29)
        {
            mat4 _243 = _s1_b1.uSkinData.jointMatrices[inIndex.x] * inWeight.x;
            mat4 _250 = _s1_b1.uSkinData.jointMatrices[inIndex.y] * inWeight.y;
            mat4 _271 = _s1_b1.uSkinData.jointMatrices[inIndex.z] * inWeight.z;
            mat4 _292 = _s1_b1.uSkinData.jointMatrices[inIndex.w] * inWeight.w;
            _326 = _s1_b0.uMeshMatrix.mesh[(gl_InstanceID + SPIRV_Cross_BaseInstance)].world * mat4(((_243[0] + _250[0]) + _271[0]) + _292[0], ((_243[1] + _250[1]) + _271[1]) + _292[1], ((_243[2] + _250[2]) + _271[2]) + _292[2], ((_243[3] + _250[3]) + _271[3]) + _292[3]);
            break;
        }
        else
        {
            _326 = _s1_b0.uMeshMatrix.mesh[(gl_InstanceID + SPIRV_Cross_BaseInstance)].world;
            break;
        }
    } while(false);
    gl_Position = _s0_b0.uCameras[_s0_b1.uGeneralData.indices.x].viewProj * (_326 * vec4(inPosition, 1.0));
    if (_198)
    {
        gl_Position = vec4(gl_Position.x, gl_Position.y * CORE_FLIP_NDC, fma(gl_Position.z, 2.0, -gl_Position.w), gl_Position.w);
    }
}

