#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

// includes

#include "common/morph_target_structs.h"

// sets

layout(set = 0, binding = 0, std140) restrict readonly buffer uMorphData
{
    MorphTargetInfoStruct uObjects[];
};

layout(set = 1, binding = 0, std430) restrict readonly buffer IndexData
{
    uint indexData[];
};

layout(set = 1, binding = 1, std430) restrict readonly buffer VertexData
{
    MorphInputData data[];
};

layout(set = 2, binding = 0, std430) restrict writeonly buffer PosOut
{
    float posOut[];
};
layout(set = 2, binding = 1, std430) restrict writeonly buffer NorOut
{
#if defined(CORE_MORPH_USE_16BIT_NOR_TAN)
    uint norOut[];
#else
    float norOut[];
#endif
};
layout(set = 2, binding = 2, std430) restrict writeonly buffer TanOut
{
#if defined(CORE_MORPH_USE_16BIT_NOR_TAN)
    uint tanOut[];
#else
    vec4 tanOut[];
#endif
};

layout(push_constant, std430) uniform uPushConstant
{
    MorphObjectPushConstantStruct uObjectPushConstant;
};

    ///////////////////////////////////////////////////////////////////////////////

#if defined(CORE_MORPH_USE_PACKED_NOR_TAN)
vec3 UnpackMorphNormal(uvec4 nt)
{
    vec4 normal;
    normal.xy = unpackHalf2x16(nt.x);
    normal.zw = unpackHalf2x16(nt.y);
    return normal.xyz;
}

vec4 UnpackMorphTangent(uvec4 nt)
{
    vec4 tangent;
    tangent.xy = unpackHalf2x16(nt.z);
    tangent.zw = unpackHalf2x16(nt.w);
    return tangent;
}
#endif

///////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 64) in;
void main()
{
    const uint tid = gl_GlobalInvocationID.x;

    // if early exit is used SPIRV-Cross generates switch(0) { default: if (tid >= vertexCount) { break; }...
    // AMD's compiler fails to link such shaders.
    if (tid < uObjectPushConstant.vertexCount) {
        const uint baseid = tid * 3; // 3 = x,y,z (no vec3's in ssbos..)
        vec3 p = data[tid].pos.xyz;

#if defined(CORE_MORPH_USE_PACKED_NOR_TAN)
        vec3 n = UnpackMorphNormal(data[tid].nortan);
        const vec4 fullTangent = UnpackMorphTangent(data[tid].nortan);
        const float tangentW = fullTangent.w;
        vec3 t = fullTangent.xyz;
#else
        vec3 n = data[tid].nor.xyz;
        vec3 t = data[tid].tan.xyz;
        const float tangentW = data[tid].tan.w;
#endif

        for (int i = 0; i < uObjectPushConstant.activeTargets; i++) {
            const uint id = uObjects[uObjectPushConstant.morphSet + i / 4].target[i % 4];

            const uint index = indexData[tid + (id * uObjectPushConstant.vertexCount)];
            if (index != 0xFFFFFFFF) {
                const float w = uObjects[uObjectPushConstant.morphSet + i / 4].weight[i % 4];
                p += data[index].pos.xyz * w;
#if defined(CORE_MORPH_USE_PACKED_NOR_TAN)
                n += UnpackMorphNormal(data[index].nortan) * w;
                t += UnpackMorphTangent(data[index].nortan).xyz * w;
#else
                n += data[index].nor.xyz * w;
                t += data[index].tan.xyz * w;
#endif
            }
        }
        posOut[baseid + 0] = p.x;
        posOut[baseid + 1] = p.y;
        posOut[baseid + 2] = p.z;

#if defined(CORE_MORPH_USE_16BIT_NOR_TAN)
        norOut[tid * 2] = packSnorm2x16(n.xy);
        norOut[tid * 2 + 1] = packSnorm2x16(vec2(n.z, 0.0));

        tanOut[tid * 2] = packSnorm2x16(t.xy);
        tanOut[tid * 2 + 1] = packSnorm2x16(vec2(t.z, tangentW));
#else
        norOut[baseid + 0] = n.x;
        norOut[baseid + 1] = n.y;
        norOut[baseid + 2] = n.z;
        tanOut[tid] = vec4(t, tangentW);
#endif
        // NOTE: "After applying morph targets to vertex positions and normals, tangent space may need to be recalculated.
        // See Appendix A for details." I believe this is the case when tangent deltas do not exist. Need to specialize to
        // skip tangent interpolation and to calculate the tangents. To calculate the tangents we need to add access to base
        // objects UV. (but WHICH tangent space to use... if multiple texture coordinates) see
        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets
    }
}
