#version 450

#ifndef SPIRV_CROSS_CONSTANT_ID_0
#define SPIRV_CROSS_CONSTANT_ID_0 0u
#endif
const uint CORE_POST_PROCESS_FLAGS = SPIRV_CROSS_CONSTANT_ID_0;
const uint _656 = (2u & CORE_POST_PROCESS_FLAGS);
const bool _658 = (_656 == 2u);

struct LocalPostProcessPushConstantStruct
{
    vec4 viewportSizeInvSize;
    vec4 factor;
};

struct uPostProcessPushConstant
{
    LocalPostProcessPushConstantStruct uPc;
};

uniform uPostProcessPushConstant CORE_PC_0;

uniform sampler2D s1_b0_s1_b1;

layout(location = 0) in vec2 inUv;
layout(location = 0) out vec4 outColor;

void main()
{
    vec3 _1601;
    if (_658)
    {
        vec4 _763 = textureLod(s1_b0_s1_b1, fma(vec2(-0.96875, 0.96875), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _768 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _763.z, fma(0.2989999949932098388671875, _763.x, 0.58700001239776611328125 * _763.y)));
        vec4 _781 = textureLod(s1_b0_s1_b1, fma(vec2(0.0, 0.9375), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _786 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _781.z, fma(0.2989999949932098388671875, _781.x, 0.58700001239776611328125 * _781.y)));
        vec4 _803 = textureLod(s1_b0_s1_b1, fma(vec2(0.96875), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _808 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _803.z, fma(0.2989999949932098388671875, _803.x, 0.58700001239776611328125 * _803.y)));
        vec4 _825 = textureLod(s1_b0_s1_b1, fma(vec2(-0.9375, 0.0), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _830 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _825.z, fma(0.2989999949932098388671875, _825.x, 0.58700001239776611328125 * _825.y)));
        vec4 _844 = textureLod(s1_b0_s1_b1, inUv, 0.0);
        float _849 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _844.z, fma(0.2989999949932098388671875, _844.x, 0.58700001239776611328125 * _844.y)));
        vec4 _866 = textureLod(s1_b0_s1_b1, fma(vec2(0.9375, 0.0), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _871 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _866.z, fma(0.2989999949932098388671875, _866.x, 0.58700001239776611328125 * _866.y)));
        vec4 _888 = textureLod(s1_b0_s1_b1, fma(vec2(-0.96875), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _893 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _888.z, fma(0.2989999949932098388671875, _888.x, 0.58700001239776611328125 * _888.y)));
        vec4 _910 = textureLod(s1_b0_s1_b1, fma(vec2(0.0, -0.9375), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _915 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _910.z, fma(0.2989999949932098388671875, _910.x, 0.58700001239776611328125 * _910.y)));
        vec4 _932 = textureLod(s1_b0_s1_b1, fma(vec2(0.96875, -0.96875), CORE_PC_0.uPc.viewportSizeInvSize.zw, inUv), 0.0);
        float _937 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _932.z, fma(0.2989999949932098388671875, _932.x, 0.58700001239776611328125 * _932.y)));
        _1601 = ((((((((((_763.xyz * 0.0625) * _768) + ((_781.xyz * 0.125) * _786)) + ((_803.xyz * 0.0625) * _808)) + ((_825.xyz * 0.125) * _830)) + ((_844.xyz * 0.25) * _849)) + ((_866.xyz * 0.125) * _871)) + ((_888.xyz * 0.0625) * _893)) + ((_910.xyz * 0.125) * _915)) + ((_932.xyz * 0.0625) * _937)) * (10.5 / ((((((((_768 + _786) + _808) + _830) + _849) + _871) + _893) + _915) + _937));
    }
    else
    {
        float _1058 = inUv.x - CORE_PC_0.uPc.viewportSizeInvSize.z;
        float _1063 = inUv.y - CORE_PC_0.uPc.viewportSizeInvSize.w;
        vec4 _1065 = textureLod(s1_b0_s1_b1, vec2(_1058, _1063), 0.0);
        float _1070 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1065.z, fma(0.2989999949932098388671875, _1065.x, 0.58700001239776611328125 * _1065.y)));
        vec4 _1089 = textureLod(s1_b0_s1_b1, vec2(inUv.x, _1063), 0.0);
        float _1094 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1089.z, fma(0.2989999949932098388671875, _1089.x, 0.58700001239776611328125 * _1089.y)));
        float _1111 = inUv.x + CORE_PC_0.uPc.viewportSizeInvSize.z;
        vec4 _1118 = textureLod(s1_b0_s1_b1, vec2(_1111, _1063), 0.0);
        float _1123 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1118.z, fma(0.2989999949932098388671875, _1118.x, 0.58700001239776611328125 * _1118.y)));
        vec4 _1144 = textureLod(s1_b0_s1_b1, vec2(_1058, inUv.y), 0.0);
        float _1149 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1144.z, fma(0.2989999949932098388671875, _1144.x, 0.58700001239776611328125 * _1144.y)));
        vec4 _1167 = textureLod(s1_b0_s1_b1, inUv, 0.0);
        float _1172 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1167.z, fma(0.2989999949932098388671875, _1167.x, 0.58700001239776611328125 * _1167.y)));
        vec4 _1193 = textureLod(s1_b0_s1_b1, vec2(_1111, inUv.y), 0.0);
        float _1198 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1193.z, fma(0.2989999949932098388671875, _1193.x, 0.58700001239776611328125 * _1193.y)));
        float _1220 = inUv.y + CORE_PC_0.uPc.viewportSizeInvSize.w;
        vec4 _1222 = textureLod(s1_b0_s1_b1, vec2(_1058, _1220), 0.0);
        float _1227 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1222.z, fma(0.2989999949932098388671875, _1222.x, 0.58700001239776611328125 * _1222.y)));
        vec4 _1248 = textureLod(s1_b0_s1_b1, vec2(inUv.x, _1220), 0.0);
        float _1253 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1248.z, fma(0.2989999949932098388671875, _1248.x, 0.58700001239776611328125 * _1248.y)));
        vec4 _1277 = textureLod(s1_b0_s1_b1, vec2(_1111, _1220), 0.0);
        float _1282 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1277.z, fma(0.2989999949932098388671875, _1277.x, 0.58700001239776611328125 * _1277.y)));
        vec2 _1293 = CORE_PC_0.uPc.viewportSizeInvSize.zw * 0.5;
        float _1300 = _1293.x;
        float _1301 = inUv.x - _1300;
        float _1305 = _1293.y;
        float _1306 = inUv.y - _1305;
        vec4 _1308 = textureLod(s1_b0_s1_b1, vec2(_1301, _1306), 0.0);
        float _1313 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1308.z, fma(0.2989999949932098388671875, _1308.x, 0.58700001239776611328125 * _1308.y)));
        float _1330 = inUv.x + _1300;
        vec4 _1337 = textureLod(s1_b0_s1_b1, vec2(_1330, _1306), 0.0);
        float _1342 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1337.z, fma(0.2989999949932098388671875, _1337.x, 0.58700001239776611328125 * _1337.y)));
        float _1364 = inUv.y + _1305;
        vec4 _1366 = textureLod(s1_b0_s1_b1, vec2(_1301, _1364), 0.0);
        float _1371 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1366.z, fma(0.2989999949932098388671875, _1366.x, 0.58700001239776611328125 * _1366.y)));
        vec4 _1395 = textureLod(s1_b0_s1_b1, vec2(_1330, _1364), 0.0);
        float _1400 = 1.0 / (1.0 + fma(0.114000000059604644775390625, _1395.z, fma(0.2989999949932098388671875, _1395.x, 0.58700001239776611328125 * _1395.y)));
        _1601 = ((((((((((((((_1065.xyz * 0.03125) * _1070) + ((_1089.xyz * 0.0625) * _1094)) + ((_1118.xyz * 0.03125) * _1123)) + ((_1144.xyz * 0.0625) * _1149)) + ((_1167.xyz * 0.125) * _1172)) + ((_1193.xyz * 0.0625) * _1198)) + ((_1222.xyz * 0.03125) * _1227)) + ((_1248.xyz * 0.125) * _1253)) + ((_1277.xyz * 0.03125) * _1282)) + ((_1308.xyz * 0.125) * _1313)) + ((_1337.xyz * 0.125) * _1342)) + ((_1366.xyz * 0.125) * _1371)) + ((_1395.xyz * 0.125) * _1400)) * (13.0 / (((((((((((((9.9999997473787516355514526367188e-06 + _1070) + _1094) + _1123) + _1149) + _1172) + _1198) + _1227) + _1253) + _1282) + _1313) + _1342) + _1371) + _1400));
    }
    float _1554 = fma(0.114000000059604644775390625, _1601.z, fma(0.2989999949932098388671875, _1601.x, 0.58700001239776611328125 * _1601.y));
    vec3 _1602;
    if (_1554 < CORE_PC_0.uPc.factor.x)
    {
        _1602 = vec3(0.0);
    }
    else
    {
        vec3 _1603;
        if (_1554 < CORE_PC_0.uPc.factor.y)
        {
            _1603 = _1601 * max(0.0, (_1554 - CORE_PC_0.uPc.factor.x) * (1.0 / (CORE_PC_0.uPc.factor.y - CORE_PC_0.uPc.factor.x)));
        }
        else
        {
            _1603 = _1601;
        }
        _1602 = _1603;
    }
    outColor = vec4(min(_1602, vec3(64512.0)), 1.0);
}

