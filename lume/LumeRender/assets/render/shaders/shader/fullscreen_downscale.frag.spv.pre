














#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable




#line 1 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_compatibility_common.h"






































precision highp float;
precision highp int;





layout(constant_id = 256)const uint CORE_BACKEND_TYPE = 0;




layout(constant_id = 257)const float CORE_FLIP_NDC = 1.0;










vec2 GetFragCoordUv(vec2 fragCoord, vec2 inverseTexelSize)
{
    vec2 uv = fragCoord * inverseTexelSize;
    if(CORE_FLIP_NDC < 0.0){
        uv = vec2(uv . x, 1.0 - uv . y);
    }
    return uv;
}







#line 24 "shader/fullscreen_downscale.frag"



layout(set = 0, binding = 0)uniform sampler uSampler;
layout(set = 0, binding = 1)uniform texture2D uTex;



layout(location = 0)in vec2 inUv;

layout(location = 0)out vec4 outColor;

struct PushConstantStruct
{
    vec4 texSizeInvTexSize;
};

layout(push_constant, std430)uniform uPushConstant
{
    PushConstantStruct uPc;
};

void main(void)
{
    const vec2 ths = uPc . texSizeInvTexSize . zw * 0.5;
    const vec2 uv = inUv;


    vec4 color = textureLod(sampler2D(uTex, uSampler), uv, 0)* 0.5;


    color += textureLod(sampler2D(uTex, uSampler), uv - ths, 0)* 0.125;
    color += textureLod(sampler2D(uTex, uSampler), vec2(uv . x + ths . x, uv . y - ths . y), 0)* 0.125;
    color += textureLod(sampler2D(uTex, uSampler), vec2(uv . x - ths . x, uv . y + ths . y), 0)* 0.125;
    color += textureLod(sampler2D(uTex, uSampler), uv + ths, 0)* 0.125;

    outColor = color . rgba;
}
