#version 320 es
precision highp float;
precision highp int;

#ifndef SPIRV_CROSS_CONSTANT_ID_0
#define SPIRV_CROSS_CONSTANT_ID_0 0u
#endif
const uint CORE_POST_PROCESS_FLAGS = SPIRV_CROSS_CONSTANT_ID_0;
const bool _240 = (CORE_POST_PROCESS_FLAGS == 1u);
const bool _249 = (CORE_POST_PROCESS_FLAGS == 2u);

uniform highp sampler2D s1_b0;

layout(location = 0) in vec2 inUv;
layout(location = 0) out vec4 outColor;

void main()
{
    vec2 _481;
    if (_240)
    {
        vec2 _287[5];
        _287[0] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(-2, 0)).xy;
        _287[1] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(-1, 0)).xy;
        _287[2] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0)).xy;
        _287[3] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(1, 0)).xy;
        _287[4] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(2, 0)).xy;
        vec2 _480;
        _480 = vec2(0.0);
        uint _479 = 0u;
        float _483 = 0.0;
        for (; _479 < 5u; )
        {
            float _342 = fma(_287[_479].x, _287[_479].x, _287[_479].y * _287[_479].y);
            bool _325 = _342 > _483;
            _483 = _325 ? _342 : _483;
            _480 = mix(_480, _287[_479], bvec2(_325));
            _479++;
            continue;
        }
        _481 = _480;
    }
    else
    {
        vec2 _482;
        if (_249)
        {
            vec2 _343[5];
            _343[0] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0, -2)).xy;
            _343[1] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0, -1)).xy;
            _343[2] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0)).xy;
            _343[3] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0, 1)).xy;
            _343[4] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0, 2)).xy;
            vec2 _476;
            _476 = vec2(0.0);
            uint _475 = 0u;
            float _477 = 0.0;
            for (; _475 < 5u; )
            {
                float _398 = fma(_343[_475].x, _343[_475].x, _343[_475].y * _343[_475].y);
                bool _381 = _398 > _477;
                _477 = _381 ? _398 : _477;
                _476 = mix(_476, _343[_475], bvec2(_381));
                _475++;
                continue;
            }
            _482 = _476;
        }
        else
        {
            vec2 _399[9];
            _399[0] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(-1)).xy;
            _399[1] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0, -1)).xy;
            _399[2] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(1, -1)).xy;
            _399[3] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(-1, 0)).xy;
            _399[4] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0)).xy;
            _399[5] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(1, 0)).xy;
            _399[6] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(-1, 1)).xy;
            _399[7] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(0, 1)).xy;
            _399[8] = textureLodOffset(s1_b0, inUv, 0.0, ivec2(1)).xy;
            vec2 _472;
            _472 = vec2(0.0);
            uint _471 = 0u;
            float _473 = 0.0;
            for (; _471 < 9u; )
            {
                float _470 = fma(_399[_471].x, _399[_471].x, _399[_471].y * _399[_471].y);
                bool _453 = _470 > _473;
                _473 = _453 ? _470 : _473;
                _472 = mix(_472, _399[_471], bvec2(_453));
                _471++;
                continue;
            }
            _482 = _472;
        }
        _481 = _482;
    }
    outColor = vec4(_481, 0.0, 0.0);
}

