














#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable




#line 1 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_compatibility_common.h"






































precision highp float;
precision highp int;





layout(constant_id = 256)const uint CORE_BACKEND_TYPE = 0;




layout(constant_id = 257)const float CORE_FLIP_NDC = 1.0;










vec2 GetFragCoordUv(vec2 fragCoord, vec2 inverseTexelSize)
{
    vec2 uv = fragCoord * inverseTexelSize;
    if(CORE_FLIP_NDC < 0.0){
        uv = vec2(uv . x, 1.0 - uv . y);
    }
    return uv;
}







#line 24 "shader/depth_of_field_blur.frag"




#line 1 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_post_process_layout_common.h"


















#line 1 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_compatibility_common.h"












































































#line 20 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_post_process_layout_common.h"
#line 1 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_post_process_structs_common.h"


















#line 1 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_compatibility_common.h"












































































#line 20 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_post_process_structs_common.h"






















































struct GlobalPostProcessStruct {

    uvec4 flags;

    vec4 renderTimings;


    vec4 factors[14];


    vec4 userFactors[16];
};




struct LocalPostProcessStruct {

    vec4 factors[16];
};

struct LocalPostProcessPushConstantStruct {

    vec4 viewportSizeInvSize;

    vec4 factor;
};

struct PostProcessTonemapStruct {
    vec4 texSizeInvTexSize;

    uvec4 flags;

    vec4 tonemap;
    vec4 vignette;
    vec4 colorFringe;
    vec4 dither;

    vec4 bloomParameters;
};


#line 21 "/home/z00522378/workspace/OH_1210/foundation/graphic/graphic_3d/lume/LumeRender/api/render/shaders/common/render_post_process_layout_common.h"




layout(set = 0, binding = 0, std140)uniform uGlobalStructData
{
    GlobalPostProcessStruct uGlobalData;
};
layout(set = 0, binding = 1, std140)uniform uLocalStructData
{
    LocalPostProcessStruct uLocalData;
};

layout(push_constant, std430)uniform uPostProcessPushConstant
{
    LocalPostProcessPushConstantStruct uPc;
};

layout(constant_id = 0)const uint CORE_POST_PROCESS_FLAGS = 0;






#line 29 "shader/depth_of_field_blur.frag"

layout(set = 1, binding = 0)uniform sampler2D uTex;
layout(set = 1, binding = 1)uniform sampler2D uDepth;



layout(location = 0)in vec2 inUv;

layout(location = 0)out vec4 outNearColor;
layout(location = 1)out vec4 outFarColor;

float LinearDepth(float depth, float near, float far)
{
    return(far * near)/((near - far)* depth + far);
}

void main(void)
{
                mediump float depth = texture(uDepth, inUv, 0). r;

    const float linearDepth = LinearDepth(depth, uLocalData . factors[1]. z, uLocalData . factors[1]. w);


    float nearTransitionStart = uLocalData . factors[0]. x;
    float focusStart = uLocalData . factors[0]. y;
    float focusEnd = uLocalData . factors[0]. z;
    float farTransitionEnd = uLocalData . factors[0]. w;
    const float nearTransitionRange = focusStart - nearTransitionStart;
    const float farTransitionRange = farTransitionEnd - focusEnd;

    float nearBlur = uLocalData . factors[1]. x;
    float farBlur = uLocalData . factors[1]. y;

    vec4 color = textureLod(uTex, inUv, 0);

    float coc;
    if(linearDepth < nearTransitionStart){

        coc = - 1.0;
    } else if(linearDepth < focusStart){

        coc =(linearDepth - focusStart)/ nearTransitionRange;
    } else if(linearDepth < focusEnd){

        coc = 0;
    } else if(linearDepth < farTransitionEnd){

        coc =(linearDepth - focusEnd)/ farTransitionRange;
    } else {

        coc = 1.0;
    }

    outNearColor . a = - 1.0 * coc;
    outNearColor . rgb = color . rgb;
    outFarColor . a = coc;
    outFarColor . rgb = color . rgb;
}
