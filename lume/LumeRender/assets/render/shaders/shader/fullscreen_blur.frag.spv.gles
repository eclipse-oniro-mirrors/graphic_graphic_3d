#version 320 es
precision highp float;
precision highp int;

const float _112[3] = float[](0.0, 1.384615421295166015625, 3.23076915740966796875);
const float _133[3] = float[](0.2270270287990570068359375, 0.3162162303924560546875, 0.0702702701091766357421875);
const float _505[5] = float[](0.5, 0.125, 0.125, 0.125, 0.125);
#ifndef SPIRV_CROSS_CONSTANT_ID_0
#define SPIRV_CROSS_CONSTANT_ID_0 0u
#endif
const uint CORE_POST_PROCESS_FLAGS = SPIRV_CROSS_CONSTANT_ID_0;
const bool _599 = (CORE_POST_PROCESS_FLAGS == 1u);

struct LocalPostProcessPushConstantStruct
{
    vec4 viewportSizeInvSize;
    vec4 factor;
};

const bool _629 = (CORE_POST_PROCESS_FLAGS == 2u);
const bool _645 = (CORE_POST_PROCESS_FLAGS == 3u);
const bool _662 = (CORE_POST_PROCESS_FLAGS == 4u);
const bool _677 = (CORE_POST_PROCESS_FLAGS == 5u);
const bool _694 = (CORE_POST_PROCESS_FLAGS == 6u);
const bool _709 = (CORE_POST_PROCESS_FLAGS == 7u);
const bool _723 = (CORE_POST_PROCESS_FLAGS == 0u);
const bool _738 = (CORE_POST_PROCESS_FLAGS == 8u);

struct uPostProcessPushConstant
{
    LocalPostProcessPushConstantStruct uPc;
};

uniform uPostProcessPushConstant CORE_PC_0;

uniform highp sampler2D s1_b1_s1_b0;

layout(location = 0) out vec4 outColor;
layout(location = 0) in vec2 inUv;

void main()
{
    if (_599)
    {
        float _1374;
        _1374 = textureLod(s1_b1_s1_b0, inUv, 0.0).x * 0.2270270287990570068359375;
        for (int _1373 = 1; _1373 < 3; )
        {
            vec2 _789 = vec2(_112[_1373]);
            vec2 _796 = vec2(gl_FragCoord.xy);
            _1374 = fma(textureLod(s1_b1_s1_b0, fma(-_789, CORE_PC_0.uPc.factor.xy, _796) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0).x, _133[_1373], fma(textureLod(s1_b1_s1_b0, fma(_789, CORE_PC_0.uPc.factor.xy, _796) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0).x, _133[_1373], _1374));
            _1373++;
            continue;
        }
        outColor.x = _1374;
    }
    else
    {
        if (_629)
        {
            vec2 _1372;
            _1372 = textureLod(s1_b1_s1_b0, inUv, 0.0).xy * 0.2270270287990570068359375;
            for (int _1371 = 1; _1371 < 3; )
            {
                vec2 _852 = vec2(_112[_1371]);
                vec2 _859 = vec2(gl_FragCoord.xy);
                _1372 = (_1372 + (textureLod(s1_b1_s1_b0, fma(_852, CORE_PC_0.uPc.factor.xy, _859) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0).xy * _133[_1371])) + (textureLod(s1_b1_s1_b0, fma(-_852, CORE_PC_0.uPc.factor.xy, _859) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0).xy * _133[_1371]);
                _1371++;
                continue;
            }
            outColor = vec4(_1372.x, _1372.y, outColor.z, outColor.w);
        }
        else
        {
            if (_645)
            {
                vec3 _1370;
                _1370 = textureLod(s1_b1_s1_b0, inUv, 0.0).xyz * 0.2270270287990570068359375;
                for (int _1369 = 1; _1369 < 3; )
                {
                    vec2 _915 = vec2(_112[_1369]);
                    vec2 _922 = vec2(gl_FragCoord.xy);
                    _1370 = (_1370 + (textureLod(s1_b1_s1_b0, fma(_915, CORE_PC_0.uPc.factor.xy, _922) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0).xyz * _133[_1369])) + (textureLod(s1_b1_s1_b0, fma(-_915, CORE_PC_0.uPc.factor.xy, _922) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0).xyz * _133[_1369]);
                    _1369++;
                    continue;
                }
                outColor = vec4(_1370.x, _1370.y, _1370.z, outColor.w);
            }
            else
            {
                if (_662)
                {
                    float _1368;
                    _1368 = textureLod(s1_b1_s1_b0, inUv, 0.0).w * 0.2270270287990570068359375;
                    for (int _1367 = 1; _1367 < 3; )
                    {
                        _1368 = fma(textureLod(s1_b1_s1_b0, vec2(0.0), 0.0).w, _133[_1367], fma(textureLod(s1_b1_s1_b0, vec2(0.0), 0.0).w, _133[_1367], _1368));
                        _1367++;
                        continue;
                    }
                    outColor.x = _1368;
                }
                else
                {
                    if (_677)
                    {
                        vec2 _1025 = CORE_PC_0.uPc.viewportSizeInvSize.zw * 0.5;
                        vec2 _1030 = inUv + _1025;
                        float _1049 = _1025.x;
                        float _1053 = _1025.y;
                        vec3 _1087 = (textureLod(s1_b1_s1_b0, _1030, 0.0).xyz * 0.125) + ((textureLod(s1_b1_s1_b0, vec2(inUv.x - _1049, inUv.y + _1053), 0.0).xyz * 0.125) + ((textureLod(s1_b1_s1_b0, vec2(inUv.x + _1049, inUv.y - _1053), 0.0).xyz * 0.125) + ((textureLod(s1_b1_s1_b0, inUv - _1025, 0.0).xyz * 0.125) + (textureLod(s1_b1_s1_b0, _1030, 0.0).xyz * 0.5))));
                        outColor = vec4(_1087.x, _1087.y, _1087.z, outColor.w);
                    }
                    else
                    {
                        if (_694)
                        {
                            outColor = textureLod(s1_b1_s1_b0, inUv, 0.0);
                        }
                        else
                        {
                            if (_709)
                            {
                                vec2 _1104 = CORE_PC_0.uPc.viewportSizeInvSize.zw * 0.5;
                                float _1120 = _1104.x;
                                float _1124 = _1104.y;
                                vec4 _1098[5] = vec4[](textureLod(s1_b1_s1_b0, inUv, 0.0), textureLod(s1_b1_s1_b0, inUv - _1104, 0.0), textureLod(s1_b1_s1_b0, vec2(inUv.x + _1120, inUv.y - _1124), 0.0), textureLod(s1_b1_s1_b0, vec2(inUv.x - _1120, inUv.y + _1124), 0.0), textureLod(s1_b1_s1_b0, inUv + _1104, 0.0));
                                float _1362;
                                _1362 = 0.0;
                                for (int _1361 = 0; _1361 < 5; )
                                {
                                    _1362 += _1098[_1361].w;
                                    _1361++;
                                    continue;
                                }
                                vec4 _1364;
                                if (_1362 > 0.0)
                                {
                                    vec4 _1365;
                                    _1365 = vec4(0.0);
                                    for (int _1363 = 0; _1363 < 5; )
                                    {
                                        _1365 += (_1098[_1363] * _505[_1363]);
                                        _1363++;
                                        continue;
                                    }
                                    _1364 = _1365;
                                }
                                else
                                {
                                    _1364 = _1098[0];
                                }
                                outColor = _1364;
                            }
                            else
                            {
                                if (_723)
                                {
                                    vec4 _1360;
                                    _1360 = textureLod(s1_b1_s1_b0, inUv, 0.0) * 0.2270270287990570068359375;
                                    for (int _1359 = 1; _1359 < 3; )
                                    {
                                        vec2 _1209 = vec2(_112[_1359]);
                                        vec2 _1216 = vec2(gl_FragCoord.xy);
                                        _1360 = (_1360 + (textureLod(s1_b1_s1_b0, fma(_1209, CORE_PC_0.uPc.factor.xy, _1216) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0) * _133[_1359])) + (textureLod(s1_b1_s1_b0, fma(-_1209, CORE_PC_0.uPc.factor.xy, _1216) * CORE_PC_0.uPc.viewportSizeInvSize.zw, 0.0) * _133[_1359]);
                                        _1359++;
                                        continue;
                                    }
                                    outColor = _1360;
                                }
                                else
                                {
                                    if (_738)
                                    {
                                        vec2 _1257 = CORE_PC_0.uPc.viewportSizeInvSize.zw * 0.5;
                                        float _1273 = _1257.x;
                                        float _1277 = _1257.y;
                                        vec4 _1251[5] = vec4[](textureLod(s1_b1_s1_b0, inUv, 0.0), textureLod(s1_b1_s1_b0, inUv - _1257, 0.0), textureLod(s1_b1_s1_b0, vec2(inUv.x + _1273, inUv.y - _1277), 0.0), textureLod(s1_b1_s1_b0, vec2(inUv.x - _1273, inUv.y + _1277), 0.0), textureLod(s1_b1_s1_b0, inUv + _1257, 0.0));
                                        float _1354;
                                        _1354 = 0.0;
                                        for (int _1353 = 0; _1353 < 5; )
                                        {
                                            _1354 += _1251[_1353].w;
                                            _1353++;
                                            continue;
                                        }
                                        vec4 _1356;
                                        if (_1354 > 0.0)
                                        {
                                            vec4 _1357;
                                            _1357 = vec4(0.0);
                                            for (int _1355 = 0; _1355 < 5; )
                                            {
                                                _1357 += (_1251[_1355] * _505[_1355]);
                                                _1355++;
                                                continue;
                                            }
                                            _1356 = _1357;
                                        }
                                        else
                                        {
                                            _1356 = _1251[0];
                                        }
                                        outColor = _1356;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

