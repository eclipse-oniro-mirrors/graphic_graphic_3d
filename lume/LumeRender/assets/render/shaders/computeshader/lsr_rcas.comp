#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

// =================================================================================================
//  RCAS FINAL PASS
//  Ported from AMD FSR 1 / RCAS reference.
// =================================================================================================

#include "render/shaders/common/render_color_conversion_common.h"
#include "render/shaders/common/render_post_process_structs_common.h"

#include "common/bloom_common.h"

//#define Lsr_RCAS_PASSTHROUGH_ALPHA
//#define Lsr_RCAS_DENOISE

layout(set = 0, binding = 0) uniform texture2D  RCAS_InputTex;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D RCAS_OutputImg; // final sharpened
layout(set = 0, binding = 2) uniform sampler               uSampler;


layout(push_constant, std430) uniform uPostProcessPushConstant
{
    LocalPostProcessPushConstantStruct uPc;
};

vec2  DisplaySize()   { return uPc.viewportSizeInvSize.xy; }
vec2  InvDisplaySize(){ return uPc.viewportSizeInvSize.zw; }

// uPc.factor = (exposure, pre_exposure, sharpness, 0)
// Sharpness : 0 = max, 1 = -1 stop, 2 = -2 stops
float Exposure()      { return uPc.factor.x; }
float PreExposure()   { return uPc.factor.y; }

vec3  PrepareRgb  (vec3 c){ return max(c * Exposure() * PreExposure(), vec3(0.0)); }
vec3  UnprepareRgb(vec3 c){ return max(c / Exposure(),                 vec3(0.0)); }


#define Saturate(x)          clamp((x), 0.0, 1.0)
#define Max3(a,b,c)          max(max((a),(b)),(c))
#define Min3(a,b,c)          min(min((a),(b)),(c))
#define IsGreaterThanZero(x) step(0.0, (x))
#define ApproximateReciprocalMedium(x) (1.0 / (x))
#define ApproximateReciprocalSquareRoot(x) inversesqrt(x)
#define Fract(x)             fract(x)


uvec4 RCASConfig()
{
    float  linearSharp = exp2(-uPc.factor.z);
    uvec4  con;

    con.x = floatBitsToUint(linearSharp);

    con.y = packHalf2x16(vec2(linearSharp));

    con.z = 0u;
    con.w = 0u;
    return con;
}

vec4 LsrRcasLoadF(ivec2 p)
{
    vec2 uv      = (vec2(p) + 0.5) * InvDisplaySize();
    vec4 c = texture(sampler2D(RCAS_InputTex, uSampler), uv);

    c.rgb = PrepareRgb(c.rgb);
    return c;
}

#define Lsr_RCAS_LIMIT (0.25 - (1.0/16.0))

void LsrRcasF(out float pixR, out float pixG, out float pixB,
#ifdef Lsr_RCAS_PASSTHROUGH_ALPHA
              out float pixA,
#endif
              uvec2 ip, uvec4 con)
{
    // neighbourhood fetch -----------------------------------------------------------------
    ivec2 sp = ivec2(ip);
    vec3 b = LsrRcasLoadF(sp + ivec2( 0,-1)).rgb;
    vec3 d = LsrRcasLoadF(sp + ivec2(-1, 0)).rgb;
#ifdef Lsr_RCAS_PASSTHROUGH_ALPHA
    vec4 ee = LsrRcasLoadF(sp);
    vec3 e  = ee.rgb; pixA = ee.a;
#else
    vec3 e  = LsrRcasLoadF(sp).rgb;
#endif
    vec3 f = LsrRcasLoadF(sp + ivec2( 1, 0)).rgb;
    vec3 h = LsrRcasLoadF(sp + ivec2( 0, 1)).rgb;


    // luma*2 and noise figure --------------------------------------------------------------
    float bL = dot(b, vec3(0.5,1.0,0.5));
    float dL = dot(d, vec3(0.5,1.0,0.5));
    float eL = dot(e, vec3(0.5,1.0,0.5));
    float fL = dot(f, vec3(0.5,1.0,0.5));
    float hL = dot(h, vec3(0.5,1.0,0.5));

    float nz  = 0.25*(bL+dL+fL+hL) - eL;
    nz  = Saturate(abs(nz) * ApproximateReciprocalMedium(
                      Max3(Max3(bL,dL,eL), fL, hL) - Min3(Min3(bL,dL,eL), fL, hL)));
    nz  = -0.5* nz + 1.0;

    // min/max ring ------------------------------------------------------------------------
    vec3 mn4 = vec3( min(min(b.x,d.x), min(f.x,h.x)),
                     min(min(b.y,d.y), min(f.y,h.y)),
                     min(min(b.z,d.z), min(f.z,h.z)) );
    vec3 mx4 = vec3( max(max(b.x,d.x), max(f.x,h.x)),
                     max(max(b.y,d.y), max(f.y,h.y)),
                     max(max(b.z,d.z), max(f.z,h.z)) );

    vec2 peakC = vec2(1.0, -4.0);

    vec3 hitMin = mn4 / (4.0*mx4);
    vec3 hitMax = (peakC.x - mx4) / (peakC.x + peakC.y + 4.0*mn4);
    vec3 lobe   = max(-hitMin, hitMax);
    float l     = max(-Lsr_RCAS_LIMIT, min(max(max(lobe.x,lobe.y), lobe.z), 0.0));

    float sharp = uintBitsToFloat(con.x);  // linear sharpness stored in con.x
#ifdef Lsr_RCAS_DENOISE
    l *= nz;
#endif
    l *= sharp;

    float rcpL = ApproximateReciprocalMedium(4.0*l + 1.0);
    vec3 outC  = (l*b + l*d + l*h + l*f + e) * rcpL;

    pixR = outC.r;
    pixG = outC.g;
    pixB = outC.b;
}

struct RCASOutputs { vec3 fUpscaledColor; };

void CurrFilter(uvec2 ip, inout RCASOutputs outR)
{
    float r,g,b;
    LsrRcasF(r,g,b,ip, RCASConfig());
    outR.fUpscaledColor = UnprepareRgb(vec3(r,g,b));
}

#define cTgs 16


layout(local_size_x = cTgs, local_size_y = cTgs, local_size_z = 1) in;
void main()
{
    uvec2 gid = gl_GlobalInvocationID.xy;
    if (any(greaterThanEqual(gid, uvec2(DisplaySize())))) return;

    RCASOutputs o; CurrFilter(gid, o);
    imageStore(RCAS_OutputImg, ivec2(gid), vec4(o.fUpscaledColor, 1.0));
}
