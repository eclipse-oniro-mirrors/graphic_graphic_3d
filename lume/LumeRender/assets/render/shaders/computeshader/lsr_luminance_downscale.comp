#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

// Lume Super Resolution
// Compute Luminance Downscale level 1 stage

// includes
#include "render/shaders/common/render_color_conversion_common.h"
#include "render/shaders/common/render_post_process_structs_common.h"

#include "common/bloom_common.h"

// sets

layout(set = 0, binding = 0, r16f/*r16f*/) uniform writeonly image2D dstTex;
layout(set = 0, binding = 1) uniform texture2D srcTex;
layout(set = 0, binding = 2) uniform sampler uSampler;

layout(push_constant, std430) uniform uPostProcessPushConstant
{
    LocalPostProcessPushConstantStruct uPc;
};

float Exposure()
{
    return 0.7;
}

/*
Aces tonemapping.
https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
*/
vec3 TonemapAces(vec3 x)
{
    const float a = 2.51f;
    const float b = 0.03f;
    const float c = 2.43f;
    const float d = 0.59f;
    const float e = 0.14f;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

// CIE L* (lightness)  scaled to 0‑1
float PerceivedLuma(float Y)
{
    const float kappa  = 24389.0 / 27.0;   // 903.3
    const float epsilon= 216.0 / 24389.0;  // 0.008856
    if (Y <= epsilon)
        return (kappa * Y) * 0.01;         // (116*Y/epsilon − 16)/100 simplified
    else
        return (116.0 * pow(Y, 1.0/3.0) - 16.0) * 0.01;
}

// 9-tap kernel weights (sum = 128)
const vec2  off[9] = vec2[9](
    vec2(-1,+1), vec2(0,+1), vec2(+1,+1),
    vec2(-1, 0), vec2(0, 0), vec2(+1, 0),
    vec2(-1,-1), vec2(0,-1), vec2(+1,-1));

const float w[9]   = float[9](
      8.0, 16.0,  8.0,
     16.0, 32.0, 16.0,
      8.0, 16.0,  8.0);

// 9-tap filtered fetch from srcTex at uv
vec3 Sample9(vec2 uv, vec2 invSrcSize)
{
    vec3 s = vec3(0.0);
    for (int i = 0; i < 9; ++i)
        s += texture(sampler2D(srcTex, uSampler), uv + off[i] * invSrcSize).rgb * (w[i]/128.0);
    return s;
}

layout(constant_id = 0) const uint CORE_POST_PROCESS_FLAGS = 0;

///////////////////////////////////////////////////////////////////////////////
// Luminance texture

#define cTgs 8

layout(local_size_x = cTgs, local_size_y = cTgs, local_size_z = 1) in;
void main()
{
    ivec2 dstPx = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dstSize = ivec2(uPc.viewportSizeInvSize.xy);
    if (any(greaterThanEqual(dstPx, dstSize))) return;

    vec2 uv = (vec2(dstPx) + 0.5) * uPc.viewportSizeInvSize.zw;

    vec3 rgb = Sample9(uv, uPc.viewportSizeInvSize.zw);
    
    float lum = PerceivedLuma(CalcLuma(TonemapAces(rgb * Exposure())));
    lum = pow(lum, 1.0/6.0);

    imageStore(dstTex, dstPx, vec4(lum,0,0,0));
}
