#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

// includes

#include "render/shaders/common/render_post_process_structs_common.h"

#include "common/bloom_common.h"

// sets

layout(set = 0, binding = 0, rgba16f/*r11f_g11f_b10f*/) uniform writeonly image2D uWoTex;
layout(set = 0, binding = 1) uniform texture2D uTex;
layout(set = 0, binding = 2) uniform texture2D uTexBloom;
layout(set = 0, binding = 3) uniform sampler uSampler;

layout(push_constant, std430) uniform uPostProcessPushConstant
{
    LocalPostProcessPushConstantStruct uPc;
};

layout(constant_id = 0) const uint CORE_POST_PROCESS_FLAGS = 0;

///////////////////////////////////////////////////////////////////////////////
// bloom combine

#define cTgs 8

layout(local_size_x = cTgs, local_size_y = cTgs, local_size_z = 1) in;
void main()
{
    const vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5) * uPc.viewportSizeInvSize.zw;
    const vec3 baseColor = textureLod(sampler2D(uTex, uSampler), uv, 0).xyz;
    // NOTE: more samples (lower resolution)
    //const vec3 bloomColor = textureLod(sampler2D(uTexBloom, uSampler), uv, 0).xyz;
    const vec3 bloomColor = BloomUpscale(uv, uPc.viewportSizeInvSize.zw, uTexBloom, uSampler);

    vec3 finalColor = min(BloomCombine(baseColor, bloomColor, uPc.factor), CORE_BLOOM_CLAMP_MAX_VALUE);
    //finalColor = bloomColor;
    imageStore(uWoTex, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 1.0));
}
